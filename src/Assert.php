<?php

/*
 * This file is part of Respect/Assertion.
 *
 * (c) Henrique Moody <henriquemoody@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE file
 * that was distributed with this source code.
 */

declare(strict_types=1);

namespace Respect\Assertion;

use Exception;
use finfo;
use Respect\Assertion\Assertor\AllAssertor;
use Respect\Assertion\Assertor\LengthAssertor;
use Respect\Assertion\Assertor\MaxAssertor;
use Respect\Assertion\Assertor\MinAssertor;
use Respect\Assertion\Creator\ComposedCreator;
use Respect\Assertion\Creator\KeyCreator;
use Respect\Assertion\Creator\NotCreator;
use Respect\Assertion\Creator\StandardCreator;
use Respect\Assertion\Exception\CannotCreateAssertionException;
use Throwable;

use function array_shift;

/**
 * phpcs:disable Generic.Files.LineLength
 * @method static void all(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allAlnum(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allAlpha(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allArrayType(iterable $input, Throwable|string $description = null)
 * @method static void allArrayVal(iterable $input, Throwable|string $description = null)
 * @method static void allBase(iterable $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void allBase64(iterable $input, Throwable|string $description = null)
 * @method static void allBetween(iterable $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void allBic(iterable $input, string $countryCode, Throwable|string $description = null)
 * @method static void allBoolType(iterable $input, Throwable|string $description = null)
 * @method static void allBoolVal(iterable $input, Throwable|string $description = null)
 * @method static void allBsn(iterable $input, Throwable|string $description = null)
 * @method static void allCallableType(iterable $input, Throwable|string $description = null)
 * @method static void allCallback(iterable $input, callable $callback, Throwable|string $description = null)
 * @method static void allCharset(iterable $input, string ...$charset, Throwable|string $description = null)
 * @method static void allCnh(iterable $input, Throwable|string $description = null)
 * @method static void allCnpj(iterable $input, Throwable|string $description = null)
 * @method static void allConsonant(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allContains(iterable $input, $containsValue, bool $identical = false, Throwable|string $description = null)
 * @method static void allContainsAny(iterable $input, array $needles, bool $strictCompareArray = false, Throwable|string $description = null)
 * @method static void allControl(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allCountable(iterable $input, Throwable|string $description = null)
 * @method static void allCountryCode(iterable $input, string $set = null, Throwable|string $description = null)
 * @method static void allCpf(iterable $input, Throwable|string $description = null)
 * @method static void allCreditCard(iterable $input, string $brand = null, Throwable|string $description = null)
 * @method static void allCurrencyCode(iterable $input, Throwable|string $description = null)
 * @method static void allDate(iterable $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void allDateTime(iterable $input, string $format = null, Throwable|string $description = null)
 * @method static void allDigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allDirectory(iterable $input, Throwable|string $description = null)
 * @method static void allDomain(iterable $input, bool $tldCheck = true, Throwable|string $description = null)
 * @method static void allEmail(iterable $input, Throwable|string $description = null)
 * @method static void allEndsWith(iterable $input, $endValue, bool $identical = false, Throwable|string $description = null)
 * @method static void allEquals(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allEquivalent(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allEven(iterable $input, Throwable|string $description = null)
 * @method static void allExecutable(iterable $input, Throwable|string $description = null)
 * @method static void allExists(iterable $input, Throwable|string $description = null)
 * @method static void allExtension(iterable $input, string $extension, Throwable|string $description = null)
 * @method static void allFactor(iterable $input, int $dividend, Throwable|string $description = null)
 * @method static void allFalseVal(iterable $input, Throwable|string $description = null)
 * @method static void allFibonacci(iterable $input, Throwable|string $description = null)
 * @method static void allFile(iterable $input, Throwable|string $description = null)
 * @method static void allFilterVar(iterable $input, int $filter, $options = null, Throwable|string $description = null)
 * @method static void allFinite(iterable $input, Throwable|string $description = null)
 * @method static void allFloatType(iterable $input, Throwable|string $description = null)
 * @method static void allFloatVal(iterable $input, Throwable|string $description = null)
 * @method static void allGraph(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allGreaterThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allHexRgbColor(iterable $input, Throwable|string $description = null)
 * @method static void allIban(iterable $input, Throwable|string $description = null)
 * @method static void allIdentical(iterable $input, $value, Throwable|string $description = null)
 * @method static void allImage(iterable $input, finfo $fileInfo = null, Throwable|string $description = null)
 * @method static void allImei(iterable $input, Throwable|string $description = null)
 * @method static void allIn(iterable $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void allInfinite(iterable $input, Throwable|string $description = null)
 * @method static void allInstance(iterable $input, string $instanceName, Throwable|string $description = null)
 * @method static void allIntType(iterable $input, Throwable|string $description = null)
 * @method static void allIntVal(iterable $input, Throwable|string $description = null)
 * @method static void allIp(iterable $input, string $range = '*', int $options = null, Throwable|string $description = null)
 * @method static void allIsbn(iterable $input, Throwable|string $description = null)
 * @method static void allIterableType(iterable $input, Throwable|string $description = null)
 * @method static void allJson(iterable $input, Throwable|string $description = null)
 * @method static void allLanguageCode(iterable $input, string $set = null, Throwable|string $description = null)
 * @method static void allLeapDate(iterable $input, string $format, Throwable|string $description = null)
 * @method static void allLeapYear(iterable $input, Throwable|string $description = null)
 * @method static void allLessThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allLowercase(iterable $input, Throwable|string $description = null)
 * @method static void allLuhn(iterable $input, Throwable|string $description = null)
 * @method static void allMacAddress(iterable $input, Throwable|string $description = null)
 * @method static void allMaxAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void allMimetype(iterable $input, string $mimetype, Throwable|string $description = null)
 * @method static void allMinAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void allMultiple(iterable $input, int $multipleOf, Throwable|string $description = null)
 * @method static void allNegative(iterable $input, Throwable|string $description = null)
 * @method static void allNfeAccessKey(iterable $input, Throwable|string $description = null)
 * @method static void allNif(iterable $input, Throwable|string $description = null)
 * @method static void allNip(iterable $input, Throwable|string $description = null)
 * @method static void allNo(iterable $input, $useLocale = false, Throwable|string $description = null)
 * @method static void allNoWhitespace(iterable $input, Throwable|string $description = null)
 * @method static void allNot(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allNotAlnum(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotAlpha(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotArrayType(iterable $input, Throwable|string $description = null)
 * @method static void allNotArrayVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotBase(iterable $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void allNotBase64(iterable $input, Throwable|string $description = null)
 * @method static void allNotBetween(iterable $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void allNotBic(iterable $input, string $countryCode, Throwable|string $description = null)
 * @method static void allNotBlank(iterable $input, Throwable|string $description = null)
 * @method static void allNotBoolType(iterable $input, Throwable|string $description = null)
 * @method static void allNotBoolVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotBsn(iterable $input, Throwable|string $description = null)
 * @method static void allNotCallableType(iterable $input, Throwable|string $description = null)
 * @method static void allNotCallback(iterable $input, callable $callback, Throwable|string $description = null)
 * @method static void allNotCharset(iterable $input, string ...$charset, Throwable|string $description = null)
 * @method static void allNotCnh(iterable $input, Throwable|string $description = null)
 * @method static void allNotCnpj(iterable $input, Throwable|string $description = null)
 * @method static void allNotConsonant(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotContains(iterable $input, $containsValue, bool $identical = false, Throwable|string $description = null)
 * @method static void allNotContainsAny(iterable $input, array $needles, bool $strictCompareArray = false, Throwable|string $description = null)
 * @method static void allNotControl(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotCountable(iterable $input, Throwable|string $description = null)
 * @method static void allNotCountryCode(iterable $input, string $set = null, Throwable|string $description = null)
 * @method static void allNotCpf(iterable $input, Throwable|string $description = null)
 * @method static void allNotCreditCard(iterable $input, string $brand = null, Throwable|string $description = null)
 * @method static void allNotCurrencyCode(iterable $input, Throwable|string $description = null)
 * @method static void allNotDate(iterable $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void allNotDateTime(iterable $input, string $format = null, Throwable|string $description = null)
 * @method static void allNotDigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotDirectory(iterable $input, Throwable|string $description = null)
 * @method static void allNotDomain(iterable $input, bool $tldCheck = true, Throwable|string $description = null)
 * @method static void allNotEmail(iterable $input, Throwable|string $description = null)
 * @method static void allNotEmoji(iterable $input, Throwable|string $description = null)
 * @method static void allNotEmpty(iterable $input, Throwable|string $description = null)
 * @method static void allNotEndsWith(iterable $input, $endValue, bool $identical = false, Throwable|string $description = null)
 * @method static void allNotEquals(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allNotEquivalent(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allNotEven(iterable $input, Throwable|string $description = null)
 * @method static void allNotExecutable(iterable $input, Throwable|string $description = null)
 * @method static void allNotExists(iterable $input, Throwable|string $description = null)
 * @method static void allNotExtension(iterable $input, string $extension, Throwable|string $description = null)
 * @method static void allNotFactor(iterable $input, int $dividend, Throwable|string $description = null)
 * @method static void allNotFalseVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotFibonacci(iterable $input, Throwable|string $description = null)
 * @method static void allNotFile(iterable $input, Throwable|string $description = null)
 * @method static void allNotFilterVar(iterable $input, int $filter, $options = null, Throwable|string $description = null)
 * @method static void allNotFinite(iterable $input, Throwable|string $description = null)
 * @method static void allNotFloatType(iterable $input, Throwable|string $description = null)
 * @method static void allNotFloatVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotGraph(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotGreaterThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allNotHexRgbColor(iterable $input, Throwable|string $description = null)
 * @method static void allNotIban(iterable $input, Throwable|string $description = null)
 * @method static void allNotIdentical(iterable $input, $value, Throwable|string $description = null)
 * @method static void allNotImage(iterable $input, finfo $fileInfo = null, Throwable|string $description = null)
 * @method static void allNotImei(iterable $input, Throwable|string $description = null)
 * @method static void allNotIn(iterable $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void allNotInfinite(iterable $input, Throwable|string $description = null)
 * @method static void allNotInstance(iterable $input, string $instanceName, Throwable|string $description = null)
 * @method static void allNotIntType(iterable $input, Throwable|string $description = null)
 * @method static void allNotIntVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotIp(iterable $input, string $range = '*', int $options = null, Throwable|string $description = null)
 * @method static void allNotIsbn(iterable $input, Throwable|string $description = null)
 * @method static void allNotIterableType(iterable $input, Throwable|string $description = null)
 * @method static void allNotJson(iterable $input, Throwable|string $description = null)
 * @method static void allNotLanguageCode(iterable $input, string $set = null, Throwable|string $description = null)
 * @method static void allNotLeapDate(iterable $input, string $format, Throwable|string $description = null)
 * @method static void allNotLeapYear(iterable $input, Throwable|string $description = null)
 * @method static void allNotLessThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void allNotLowercase(iterable $input, Throwable|string $description = null)
 * @method static void allNotLuhn(iterable $input, Throwable|string $description = null)
 * @method static void allNotMacAddress(iterable $input, Throwable|string $description = null)
 * @method static void allNotMaxAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void allNotMimetype(iterable $input, string $mimetype, Throwable|string $description = null)
 * @method static void allNotMinAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void allNotMultiple(iterable $input, int $multipleOf, Throwable|string $description = null)
 * @method static void allNotNegative(iterable $input, Throwable|string $description = null)
 * @method static void allNotNfeAccessKey(iterable $input, Throwable|string $description = null)
 * @method static void allNotNif(iterable $input, Throwable|string $description = null)
 * @method static void allNotNip(iterable $input, Throwable|string $description = null)
 * @method static void allNotNo(iterable $input, $useLocale = false, Throwable|string $description = null)
 * @method static void allNotNoWhitespace(iterable $input, Throwable|string $description = null)
 * @method static void allNotNullType(iterable $input, Throwable|string $description = null)
 * @method static void allNotNumber(iterable $input, Throwable|string $description = null)
 * @method static void allNotNumericVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotObjectType(iterable $input, Throwable|string $description = null)
 * @method static void allNotOdd(iterable $input, Throwable|string $description = null)
 * @method static void allNotOptional(iterable $input, Throwable|string $description = null)
 * @method static void allNotPerfectSquare(iterable $input, Throwable|string $description = null)
 * @method static void allNotPesel(iterable $input, Throwable|string $description = null)
 * @method static void allNotPhone(iterable $input, Throwable|string $description = null)
 * @method static void allNotPhpLabel(iterable $input, Throwable|string $description = null)
 * @method static void allNotPis(iterable $input, Throwable|string $description = null)
 * @method static void allNotPolishIdCard(iterable $input, Throwable|string $description = null)
 * @method static void allNotPositive(iterable $input, Throwable|string $description = null)
 * @method static void allNotPostalCode(iterable $input, string $countryCode, Throwable|string $description = null)
 * @method static void allNotPrimeNumber(iterable $input, Throwable|string $description = null)
 * @method static void allNotPrintable(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotPunct(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotReadable(iterable $input, Throwable|string $description = null)
 * @method static void allNotRegex(iterable $input, string $regex, Throwable|string $description = null)
 * @method static void allNotResourceType(iterable $input, Throwable|string $description = null)
 * @method static void allNotRoman(iterable $input, Throwable|string $description = null)
 * @method static void allNotScalarVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotSize(iterable $input, string $minSize = null, string $maxSize = null, Throwable|string $description = null)
 * @method static void allNotSlug(iterable $input, Throwable|string $description = null)
 * @method static void allNotSorted(iterable $input, string $direction, Throwable|string $description = null)
 * @method static void allNotSpace(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotStartsWith(iterable $input, $startValue, bool $identical = false, Throwable|string $description = null)
 * @method static void allNotStringType(iterable $input, Throwable|string $description = null)
 * @method static void allNotStringVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotSubdivisionCode(iterable $input, string $countryCode, Throwable|string $description = null)
 * @method static void allNotSubset(iterable $input, array $superset, Throwable|string $description = null)
 * @method static void allNotSymbolicLink(iterable $input, Throwable|string $description = null)
 * @method static void allNotTime(iterable $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void allNotTld(iterable $input, Throwable|string $description = null)
 * @method static void allNotTrueVal(iterable $input, Throwable|string $description = null)
 * @method static void allNotType(iterable $input, string $type, Throwable|string $description = null)
 * @method static void allNotUnique(iterable $input, Throwable|string $description = null)
 * @method static void allNotUploaded(iterable $input, Throwable|string $description = null)
 * @method static void allNotUppercase(iterable $input, Throwable|string $description = null)
 * @method static void allNotUrl(iterable $input, Throwable|string $description = null)
 * @method static void allNotUuid(iterable $input, int $version = null, Throwable|string $description = null)
 * @method static void allNotVersion(iterable $input, Throwable|string $description = null)
 * @method static void allNotVideoUrl(iterable $input, string $service = null, Throwable|string $description = null)
 * @method static void allNotVowel(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotWritable(iterable $input, Throwable|string $description = null)
 * @method static void allNotXdigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allNotYes(iterable $input, $useLocale = false, Throwable|string $description = null)
 * @method static void allNullType(iterable $input, Throwable|string $description = null)
 * @method static void allNumber(iterable $input, Throwable|string $description = null)
 * @method static void allNumericVal(iterable $input, Throwable|string $description = null)
 * @method static void allObjectType(iterable $input, Throwable|string $description = null)
 * @method static void allOdd(iterable $input, Throwable|string $description = null)
 * @method static void allPerfectSquare(iterable $input, Throwable|string $description = null)
 * @method static void allPesel(iterable $input, Throwable|string $description = null)
 * @method static void allPhone(iterable $input, Throwable|string $description = null)
 * @method static void allPhpLabel(iterable $input, Throwable|string $description = null)
 * @method static void allPis(iterable $input, Throwable|string $description = null)
 * @method static void allPolishIdCard(iterable $input, Throwable|string $description = null)
 * @method static void allPositive(iterable $input, Throwable|string $description = null)
 * @method static void allPostalCode(iterable $input, string $countryCode, Throwable|string $description = null)
 * @method static void allPrimeNumber(iterable $input, Throwable|string $description = null)
 * @method static void allPrintable(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allPunct(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allReadable(iterable $input, Throwable|string $description = null)
 * @method static void allRegex(iterable $input, string $regex, Throwable|string $description = null)
 * @method static void allResourceType(iterable $input, Throwable|string $description = null)
 * @method static void allRoman(iterable $input, Throwable|string $description = null)
 * @method static void allScalarVal(iterable $input, Throwable|string $description = null)
 * @method static void allSize(iterable $input, string $minSize = null, string $maxSize = null, Throwable|string $description = null)
 * @method static void allSlug(iterable $input, Throwable|string $description = null)
 * @method static void allSorted(iterable $input, string $direction, Throwable|string $description = null)
 * @method static void allSpace(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allStartsWith(iterable $input, $startValue, bool $identical = false, Throwable|string $description = null)
 * @method static void allStringType(iterable $input, Throwable|string $description = null)
 * @method static void allStringVal(iterable $input, Throwable|string $description = null)
 * @method static void allSubdivisionCode(iterable $input, string $countryCode, Throwable|string $description = null)
 * @method static void allSubset(iterable $input, array $superset, Throwable|string $description = null)
 * @method static void allSymbolicLink(iterable $input, Throwable|string $description = null)
 * @method static void allTime(iterable $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void allTld(iterable $input, Throwable|string $description = null)
 * @method static void allTrueVal(iterable $input, Throwable|string $description = null)
 * @method static void allType(iterable $input, string $type, Throwable|string $description = null)
 * @method static void allUnique(iterable $input, Throwable|string $description = null)
 * @method static void allUploaded(iterable $input, Throwable|string $description = null)
 * @method static void allUppercase(iterable $input, Throwable|string $description = null)
 * @method static void allUrl(iterable $input, Throwable|string $description = null)
 * @method static void allUuid(iterable $input, int $version = null, Throwable|string $description = null)
 * @method static void allVersion(iterable $input, Throwable|string $description = null)
 * @method static void allVideoUrl(iterable $input, string $service = null, Throwable|string $description = null)
 * @method static void allVowel(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allWritable(iterable $input, Throwable|string $description = null)
 * @method static void allXdigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void allYes(iterable $input, $useLocale = false, Throwable|string $description = null)
 * @method static void alnum(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void alpha(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void arrayType(mixed $input, Throwable|string $description = null)
 * @method static void arrayVal(mixed $input, Throwable|string $description = null)
 * @method static void base(mixed $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void base64(mixed $input, Throwable|string $description = null)
 * @method static void between(mixed $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void bic(mixed $input, string $countryCode, Throwable|string $description = null)
 * @method static void boolType(mixed $input, Throwable|string $description = null)
 * @method static void boolVal(mixed $input, Throwable|string $description = null)
 * @method static void bsn(mixed $input, Throwable|string $description = null)
 * @method static void callableType(mixed $input, Throwable|string $description = null)
 * @method static void callback(mixed $input, callable $callback, Throwable|string $description = null)
 * @method static void charset(mixed $input, string ...$charset, Throwable|string $description = null)
 * @method static void cnh(mixed $input, Throwable|string $description = null)
 * @method static void cnpj(mixed $input, Throwable|string $description = null)
 * @method static void consonant(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void contains(mixed $input, $containsValue, bool $identical = false, Throwable|string $description = null)
 * @method static void containsAny(mixed $input, array $needles, bool $strictCompareArray = false, Throwable|string $description = null)
 * @method static void control(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void countable(mixed $input, Throwable|string $description = null)
 * @method static void countryCode(mixed $input, string $set = null, Throwable|string $description = null)
 * @method static void cpf(mixed $input, Throwable|string $description = null)
 * @method static void creditCard(mixed $input, string $brand = null, Throwable|string $description = null)
 * @method static void currencyCode(mixed $input, Throwable|string $description = null)
 * @method static void date(mixed $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void dateTime(mixed $input, string $format = null, Throwable|string $description = null)
 * @method static void digit(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void directory(mixed $input, Throwable|string $description = null)
 * @method static void domain(mixed $input, bool $tldCheck = true, Throwable|string $description = null)
 * @method static void email(mixed $input, Throwable|string $description = null)
 * @method static void endsWith(mixed $input, $endValue, bool $identical = false, Throwable|string $description = null)
 * @method static void equals(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void equivalent(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void even(mixed $input, Throwable|string $description = null)
 * @method static void executable(mixed $input, Throwable|string $description = null)
 * @method static void exists(mixed $input, Throwable|string $description = null)
 * @method static void extension(mixed $input, string $extension, Throwable|string $description = null)
 * @method static void factor(mixed $input, int $dividend, Throwable|string $description = null)
 * @method static void falseVal(mixed $input, Throwable|string $description = null)
 * @method static void fibonacci(mixed $input, Throwable|string $description = null)
 * @method static void file(mixed $input, Throwable|string $description = null)
 * @method static void filterVar(mixed $input, int $filter, $options = null, Throwable|string $description = null)
 * @method static void finite(mixed $input, Throwable|string $description = null)
 * @method static void floatType(mixed $input, Throwable|string $description = null)
 * @method static void floatVal(mixed $input, Throwable|string $description = null)
 * @method static void graph(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void greaterThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void hexRgbColor(mixed $input, Throwable|string $description = null)
 * @method static void iban(mixed $input, Throwable|string $description = null)
 * @method static void identical(mixed $input, $value, Throwable|string $description = null)
 * @method static void image(mixed $input, finfo $fileInfo = null, Throwable|string $description = null)
 * @method static void imei(mixed $input, Throwable|string $description = null)
 * @method static void in(mixed $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void infinite(mixed $input, Throwable|string $description = null)
 * @method static void instance(mixed $input, string $instanceName, Throwable|string $description = null)
 * @method static void intType(mixed $input, Throwable|string $description = null)
 * @method static void intVal(mixed $input, Throwable|string $description = null)
 * @method static void ip(mixed $input, string $range = '*', int $options = null, Throwable|string $description = null)
 * @method static void isbn(mixed $input, Throwable|string $description = null)
 * @method static void iterableType(mixed $input, Throwable|string $description = null)
 * @method static void json(mixed $input, Throwable|string $description = null)
 * @method static void key(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyAlnum(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyAlpha(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyArrayType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyArrayVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyBase(array $input, mixed $key, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void keyBase64(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyBetween(array $input, mixed $key, $minimum, $maximum, Throwable|string $description = null)
 * @method static void keyBic(array $input, mixed $key, string $countryCode, Throwable|string $description = null)
 * @method static void keyBoolType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyBoolVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyBsn(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyCallableType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyCallback(array $input, mixed $key, callable $callback, Throwable|string $description = null)
 * @method static void keyCharset(array $input, mixed $key, string ...$charset, Throwable|string $description = null)
 * @method static void keyCnh(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyCnpj(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyConsonant(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyContains(array $input, mixed $key, $containsValue, bool $identical = false, Throwable|string $description = null)
 * @method static void keyContainsAny(array $input, mixed $key, array $needles, bool $strictCompareArray = false, Throwable|string $description = null)
 * @method static void keyControl(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyCountable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyCountryCode(array $input, mixed $key, string $set = null, Throwable|string $description = null)
 * @method static void keyCpf(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyCreditCard(array $input, mixed $key, string $brand = null, Throwable|string $description = null)
 * @method static void keyCurrencyCode(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyDate(array $input, mixed $key, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void keyDateTime(array $input, mixed $key, string $format = null, Throwable|string $description = null)
 * @method static void keyDigit(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyDirectory(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyDomain(array $input, mixed $key, bool $tldCheck = true, Throwable|string $description = null)
 * @method static void keyEmail(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyEndsWith(array $input, mixed $key, $endValue, bool $identical = false, Throwable|string $description = null)
 * @method static void keyEquals(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyEquivalent(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyEven(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyExecutable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyExists(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyExtension(array $input, mixed $key, string $extension, Throwable|string $description = null)
 * @method static void keyFactor(array $input, mixed $key, int $dividend, Throwable|string $description = null)
 * @method static void keyFalseVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyFibonacci(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyFile(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyFilterVar(array $input, mixed $key, int $filter, $options = null, Throwable|string $description = null)
 * @method static void keyFinite(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyFloatType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyFloatVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyGraph(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyGreaterThan(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyHexRgbColor(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyIban(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyIdentical(array $input, mixed $key, $value, Throwable|string $description = null)
 * @method static void keyImage(array $input, mixed $key, finfo $fileInfo = null, Throwable|string $description = null)
 * @method static void keyImei(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyIn(array $input, mixed $key, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void keyInfinite(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyInstance(array $input, mixed $key, string $instanceName, Throwable|string $description = null)
 * @method static void keyIntType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyIntVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyIp(array $input, mixed $key, string $range = '*', int $options = null, Throwable|string $description = null)
 * @method static void keyIsbn(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyIterableType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyJson(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyLanguageCode(array $input, mixed $key, string $set = null, Throwable|string $description = null)
 * @method static void keyLeapDate(array $input, mixed $key, string $format, Throwable|string $description = null)
 * @method static void keyLeapYear(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyLessThan(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyLowercase(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyLuhn(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyMacAddress(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyMaxAge(array $input, mixed $key, int $age, string $format = null, Throwable|string $description = null)
 * @method static void keyMimetype(array $input, mixed $key, string $mimetype, Throwable|string $description = null)
 * @method static void keyMinAge(array $input, mixed $key, int $age, string $format = null, Throwable|string $description = null)
 * @method static void keyMultiple(array $input, mixed $key, int $multipleOf, Throwable|string $description = null)
 * @method static void keyNegative(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNfeAccessKey(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNif(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNip(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNo(array $input, mixed $key, $useLocale = false, Throwable|string $description = null)
 * @method static void keyNoWhitespace(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotAlnum(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotAlpha(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotArrayType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotArrayVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotBase(array $input, mixed $key, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void keyNotBase64(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotBetween(array $input, mixed $key, $minimum, $maximum, Throwable|string $description = null)
 * @method static void keyNotBic(array $input, mixed $key, string $countryCode, Throwable|string $description = null)
 * @method static void keyNotBlank(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotBoolType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotBoolVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotBsn(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotCallableType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotCallback(array $input, mixed $key, callable $callback, Throwable|string $description = null)
 * @method static void keyNotCharset(array $input, mixed $key, string ...$charset, Throwable|string $description = null)
 * @method static void keyNotCnh(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotCnpj(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotConsonant(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotContains(array $input, mixed $key, $containsValue, bool $identical = false, Throwable|string $description = null)
 * @method static void keyNotContainsAny(array $input, mixed $key, array $needles, bool $strictCompareArray = false, Throwable|string $description = null)
 * @method static void keyNotControl(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotCountable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotCountryCode(array $input, mixed $key, string $set = null, Throwable|string $description = null)
 * @method static void keyNotCpf(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotCreditCard(array $input, mixed $key, string $brand = null, Throwable|string $description = null)
 * @method static void keyNotCurrencyCode(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotDate(array $input, mixed $key, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void keyNotDateTime(array $input, mixed $key, string $format = null, Throwable|string $description = null)
 * @method static void keyNotDigit(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotDirectory(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotDomain(array $input, mixed $key, bool $tldCheck = true, Throwable|string $description = null)
 * @method static void keyNotEmail(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotEmoji(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotEmpty(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotEndsWith(array $input, mixed $key, $endValue, bool $identical = false, Throwable|string $description = null)
 * @method static void keyNotEquals(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyNotEquivalent(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyNotEven(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotExecutable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotExists(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotExtension(array $input, mixed $key, string $extension, Throwable|string $description = null)
 * @method static void keyNotFactor(array $input, mixed $key, int $dividend, Throwable|string $description = null)
 * @method static void keyNotFalseVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotFibonacci(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotFile(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotFilterVar(array $input, mixed $key, int $filter, $options = null, Throwable|string $description = null)
 * @method static void keyNotFinite(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotFloatType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotFloatVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotGraph(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotGreaterThan(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyNotHexRgbColor(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotIban(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotIdentical(array $input, mixed $key, $value, Throwable|string $description = null)
 * @method static void keyNotImage(array $input, mixed $key, finfo $fileInfo = null, Throwable|string $description = null)
 * @method static void keyNotImei(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotIn(array $input, mixed $key, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void keyNotInfinite(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotInstance(array $input, mixed $key, string $instanceName, Throwable|string $description = null)
 * @method static void keyNotIntType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotIntVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotIp(array $input, mixed $key, string $range = '*', int $options = null, Throwable|string $description = null)
 * @method static void keyNotIsbn(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotIterableType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotJson(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotLanguageCode(array $input, mixed $key, string $set = null, Throwable|string $description = null)
 * @method static void keyNotLeapDate(array $input, mixed $key, string $format, Throwable|string $description = null)
 * @method static void keyNotLeapYear(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotLessThan(array $input, mixed $key, $compareTo, Throwable|string $description = null)
 * @method static void keyNotLowercase(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotLuhn(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotMacAddress(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotMaxAge(array $input, mixed $key, int $age, string $format = null, Throwable|string $description = null)
 * @method static void keyNotMimetype(array $input, mixed $key, string $mimetype, Throwable|string $description = null)
 * @method static void keyNotMinAge(array $input, mixed $key, int $age, string $format = null, Throwable|string $description = null)
 * @method static void keyNotMultiple(array $input, mixed $key, int $multipleOf, Throwable|string $description = null)
 * @method static void keyNotNegative(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNfeAccessKey(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNif(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNip(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNo(array $input, mixed $key, $useLocale = false, Throwable|string $description = null)
 * @method static void keyNotNoWhitespace(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNullType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNumber(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotNumericVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotObjectType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotOdd(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotOptional(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPerfectSquare(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPesel(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPhone(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPhpLabel(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPis(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPolishIdCard(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPositive(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPostalCode(array $input, mixed $key, string $countryCode, Throwable|string $description = null)
 * @method static void keyNotPresent(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPrimeNumber(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotPrintable(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotPunct(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotReadable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotRegex(array $input, mixed $key, string $regex, Throwable|string $description = null)
 * @method static void keyNotResourceType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotRoman(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotScalarVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotSize(array $input, mixed $key, string $minSize = null, string $maxSize = null, Throwable|string $description = null)
 * @method static void keyNotSlug(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotSorted(array $input, mixed $key, string $direction, Throwable|string $description = null)
 * @method static void keyNotSpace(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotStartsWith(array $input, mixed $key, $startValue, bool $identical = false, Throwable|string $description = null)
 * @method static void keyNotStringType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotStringVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotSubdivisionCode(array $input, mixed $key, string $countryCode, Throwable|string $description = null)
 * @method static void keyNotSubset(array $input, mixed $key, array $superset, Throwable|string $description = null)
 * @method static void keyNotSymbolicLink(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotTime(array $input, mixed $key, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void keyNotTld(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotTrueVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotType(array $input, mixed $key, string $type, Throwable|string $description = null)
 * @method static void keyNotUnique(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotUploaded(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotUppercase(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotUrl(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotUuid(array $input, mixed $key, int $version = null, Throwable|string $description = null)
 * @method static void keyNotVersion(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotVideoUrl(array $input, mixed $key, string $service = null, Throwable|string $description = null)
 * @method static void keyNotVowel(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotWritable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNotXdigit(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyNotYes(array $input, mixed $key, $useLocale = false, Throwable|string $description = null)
 * @method static void keyNullType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNumber(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyNumericVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyObjectType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyOdd(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPerfectSquare(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPesel(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPhone(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPhpLabel(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPis(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPolishIdCard(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPositive(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPostalCode(array $input, mixed $key, string $countryCode, Throwable|string $description = null)
 * @method static void keyPresent(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPrimeNumber(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyPrintable(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyPunct(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyReadable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyRegex(array $input, mixed $key, string $regex, Throwable|string $description = null)
 * @method static void keyResourceType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyRoman(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyScalarVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keySize(array $input, mixed $key, string $minSize = null, string $maxSize = null, Throwable|string $description = null)
 * @method static void keySlug(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keySorted(array $input, mixed $key, string $direction, Throwable|string $description = null)
 * @method static void keySpace(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyStartsWith(array $input, mixed $key, $startValue, bool $identical = false, Throwable|string $description = null)
 * @method static void keyStringType(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyStringVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keySubdivisionCode(array $input, mixed $key, string $countryCode, Throwable|string $description = null)
 * @method static void keySubset(array $input, mixed $key, array $superset, Throwable|string $description = null)
 * @method static void keySymbolicLink(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyTime(array $input, mixed $key, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void keyTld(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyTrueVal(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyType(array $input, mixed $key, string $type, Throwable|string $description = null)
 * @method static void keyUnique(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyUploaded(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyUppercase(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyUrl(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyUuid(array $input, mixed $key, int $version = null, Throwable|string $description = null)
 * @method static void keyVersion(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyVideoUrl(array $input, mixed $key, string $service = null, Throwable|string $description = null)
 * @method static void keyVowel(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyWritable(array $input, mixed $key, Throwable|string $description = null)
 * @method static void keyXdigit(array $input, mixed $key, string ...$additionalChars, Throwable|string $description = null)
 * @method static void keyYes(array $input, mixed $key, $useLocale = false, Throwable|string $description = null)
 * @method static void languageCode(mixed $input, string $set = null, Throwable|string $description = null)
 * @method static void leapDate(mixed $input, string $format, Throwable|string $description = null)
 * @method static void leapYear(mixed $input, Throwable|string $description = null)
 * @method static void length(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthBase(mixed $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void lengthBetween(mixed $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void lengthDate(mixed $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void lengthDateTime(mixed $input, string $format = null, Throwable|string $description = null)
 * @method static void lengthDigit(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void lengthEquals(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthEquivalent(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthEven(mixed $input, Throwable|string $description = null)
 * @method static void lengthFactor(mixed $input, int $dividend, Throwable|string $description = null)
 * @method static void lengthFibonacci(mixed $input, Throwable|string $description = null)
 * @method static void lengthFinite(mixed $input, Throwable|string $description = null)
 * @method static void lengthFloatType(mixed $input, Throwable|string $description = null)
 * @method static void lengthFloatVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthGreaterThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthIdentical(mixed $input, $value, Throwable|string $description = null)
 * @method static void lengthIn(mixed $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void lengthInfinite(mixed $input, Throwable|string $description = null)
 * @method static void lengthIntType(mixed $input, Throwable|string $description = null)
 * @method static void lengthIntVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthLeapDate(mixed $input, string $format, Throwable|string $description = null)
 * @method static void lengthLeapYear(mixed $input, Throwable|string $description = null)
 * @method static void lengthLessThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthMaxAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void lengthMinAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void lengthMultiple(mixed $input, int $multipleOf, Throwable|string $description = null)
 * @method static void lengthNegative(mixed $input, Throwable|string $description = null)
 * @method static void lengthNot(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthNotBase(mixed $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void lengthNotBetween(mixed $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void lengthNotDate(mixed $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void lengthNotDateTime(mixed $input, string $format = null, Throwable|string $description = null)
 * @method static void lengthNotDigit(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void lengthNotEquals(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthNotEquivalent(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthNotEven(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotFactor(mixed $input, int $dividend, Throwable|string $description = null)
 * @method static void lengthNotFibonacci(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotFinite(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotFloatType(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotFloatVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotGreaterThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthNotIdentical(mixed $input, $value, Throwable|string $description = null)
 * @method static void lengthNotIn(mixed $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void lengthNotInfinite(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotIntType(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotIntVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotLeapDate(mixed $input, string $format, Throwable|string $description = null)
 * @method static void lengthNotLeapYear(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotLessThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lengthNotMaxAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void lengthNotMinAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void lengthNotMultiple(mixed $input, int $multipleOf, Throwable|string $description = null)
 * @method static void lengthNotNegative(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotNumber(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotNumericVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotOdd(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotPerfectSquare(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotPositive(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotPrimeNumber(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotRoman(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotStringType(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotStringVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthNotTime(mixed $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void lengthNumber(mixed $input, Throwable|string $description = null)
 * @method static void lengthNumericVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthOdd(mixed $input, Throwable|string $description = null)
 * @method static void lengthPerfectSquare(mixed $input, Throwable|string $description = null)
 * @method static void lengthPositive(mixed $input, Throwable|string $description = null)
 * @method static void lengthPrimeNumber(mixed $input, Throwable|string $description = null)
 * @method static void lengthRoman(mixed $input, Throwable|string $description = null)
 * @method static void lengthStringType(mixed $input, Throwable|string $description = null)
 * @method static void lengthStringVal(mixed $input, Throwable|string $description = null)
 * @method static void lengthTime(mixed $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void lessThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void lowercase(mixed $input, Throwable|string $description = null)
 * @method static void luhn(mixed $input, Throwable|string $description = null)
 * @method static void macAddress(mixed $input, Throwable|string $description = null)
 * @method static void max(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void maxBase(iterable $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void maxBetween(iterable $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void maxDate(iterable $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void maxDateTime(iterable $input, string $format = null, Throwable|string $description = null)
 * @method static void maxDigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void maxEquals(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxEquivalent(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxEven(iterable $input, Throwable|string $description = null)
 * @method static void maxFactor(iterable $input, int $dividend, Throwable|string $description = null)
 * @method static void maxFibonacci(iterable $input, Throwable|string $description = null)
 * @method static void maxFinite(iterable $input, Throwable|string $description = null)
 * @method static void maxFloatType(iterable $input, Throwable|string $description = null)
 * @method static void maxFloatVal(iterable $input, Throwable|string $description = null)
 * @method static void maxGreaterThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxIdentical(iterable $input, $value, Throwable|string $description = null)
 * @method static void maxIn(iterable $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void maxInfinite(iterable $input, Throwable|string $description = null)
 * @method static void maxIntType(iterable $input, Throwable|string $description = null)
 * @method static void maxIntVal(iterable $input, Throwable|string $description = null)
 * @method static void maxLeapDate(iterable $input, string $format, Throwable|string $description = null)
 * @method static void maxLeapYear(iterable $input, Throwable|string $description = null)
 * @method static void maxLessThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxMaxAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void maxMinAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void maxMultiple(iterable $input, int $multipleOf, Throwable|string $description = null)
 * @method static void maxNegative(iterable $input, Throwable|string $description = null)
 * @method static void maxNot(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxNotBase(iterable $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void maxNotBetween(iterable $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void maxNotDate(iterable $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void maxNotDateTime(iterable $input, string $format = null, Throwable|string $description = null)
 * @method static void maxNotDigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void maxNotEquals(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxNotEquivalent(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxNotEven(iterable $input, Throwable|string $description = null)
 * @method static void maxNotFactor(iterable $input, int $dividend, Throwable|string $description = null)
 * @method static void maxNotFibonacci(iterable $input, Throwable|string $description = null)
 * @method static void maxNotFinite(iterable $input, Throwable|string $description = null)
 * @method static void maxNotFloatType(iterable $input, Throwable|string $description = null)
 * @method static void maxNotFloatVal(iterable $input, Throwable|string $description = null)
 * @method static void maxNotGreaterThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxNotIdentical(iterable $input, $value, Throwable|string $description = null)
 * @method static void maxNotIn(iterable $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void maxNotInfinite(iterable $input, Throwable|string $description = null)
 * @method static void maxNotIntType(iterable $input, Throwable|string $description = null)
 * @method static void maxNotIntVal(iterable $input, Throwable|string $description = null)
 * @method static void maxNotLeapDate(iterable $input, string $format, Throwable|string $description = null)
 * @method static void maxNotLeapYear(iterable $input, Throwable|string $description = null)
 * @method static void maxNotLessThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void maxNotMaxAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void maxNotMinAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void maxNotMultiple(iterable $input, int $multipleOf, Throwable|string $description = null)
 * @method static void maxNotNegative(iterable $input, Throwable|string $description = null)
 * @method static void maxNotNumber(iterable $input, Throwable|string $description = null)
 * @method static void maxNotNumericVal(iterable $input, Throwable|string $description = null)
 * @method static void maxNotOdd(iterable $input, Throwable|string $description = null)
 * @method static void maxNotPerfectSquare(iterable $input, Throwable|string $description = null)
 * @method static void maxNotPositive(iterable $input, Throwable|string $description = null)
 * @method static void maxNotPrimeNumber(iterable $input, Throwable|string $description = null)
 * @method static void maxNotRoman(iterable $input, Throwable|string $description = null)
 * @method static void maxNotStringType(iterable $input, Throwable|string $description = null)
 * @method static void maxNotStringVal(iterable $input, Throwable|string $description = null)
 * @method static void maxNotTime(iterable $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void maxNumber(iterable $input, Throwable|string $description = null)
 * @method static void maxNumericVal(iterable $input, Throwable|string $description = null)
 * @method static void maxOdd(iterable $input, Throwable|string $description = null)
 * @method static void maxPerfectSquare(iterable $input, Throwable|string $description = null)
 * @method static void maxPositive(iterable $input, Throwable|string $description = null)
 * @method static void maxPrimeNumber(iterable $input, Throwable|string $description = null)
 * @method static void maxRoman(iterable $input, Throwable|string $description = null)
 * @method static void maxStringType(iterable $input, Throwable|string $description = null)
 * @method static void maxStringVal(iterable $input, Throwable|string $description = null)
 * @method static void maxTime(iterable $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void mimetype(mixed $input, string $mimetype, Throwable|string $description = null)
 * @method static void min(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void minBase(iterable $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void minBetween(iterable $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void minDate(iterable $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void minDateTime(iterable $input, string $format = null, Throwable|string $description = null)
 * @method static void minDigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void minEquals(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minEquivalent(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minEven(iterable $input, Throwable|string $description = null)
 * @method static void minFactor(iterable $input, int $dividend, Throwable|string $description = null)
 * @method static void minFibonacci(iterable $input, Throwable|string $description = null)
 * @method static void minFinite(iterable $input, Throwable|string $description = null)
 * @method static void minFloatType(iterable $input, Throwable|string $description = null)
 * @method static void minFloatVal(iterable $input, Throwable|string $description = null)
 * @method static void minGreaterThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minIdentical(iterable $input, $value, Throwable|string $description = null)
 * @method static void minIn(iterable $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void minInfinite(iterable $input, Throwable|string $description = null)
 * @method static void minIntType(iterable $input, Throwable|string $description = null)
 * @method static void minIntVal(iterable $input, Throwable|string $description = null)
 * @method static void minLeapDate(iterable $input, string $format, Throwable|string $description = null)
 * @method static void minLeapYear(iterable $input, Throwable|string $description = null)
 * @method static void minLessThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minMaxAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void minMinAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void minMultiple(iterable $input, int $multipleOf, Throwable|string $description = null)
 * @method static void minNegative(iterable $input, Throwable|string $description = null)
 * @method static void minNot(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minNotBase(iterable $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void minNotBetween(iterable $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void minNotDate(iterable $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void minNotDateTime(iterable $input, string $format = null, Throwable|string $description = null)
 * @method static void minNotDigit(iterable $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void minNotEquals(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minNotEquivalent(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minNotEven(iterable $input, Throwable|string $description = null)
 * @method static void minNotFactor(iterable $input, int $dividend, Throwable|string $description = null)
 * @method static void minNotFibonacci(iterable $input, Throwable|string $description = null)
 * @method static void minNotFinite(iterable $input, Throwable|string $description = null)
 * @method static void minNotFloatType(iterable $input, Throwable|string $description = null)
 * @method static void minNotFloatVal(iterable $input, Throwable|string $description = null)
 * @method static void minNotGreaterThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minNotIdentical(iterable $input, $value, Throwable|string $description = null)
 * @method static void minNotIn(iterable $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void minNotInfinite(iterable $input, Throwable|string $description = null)
 * @method static void minNotIntType(iterable $input, Throwable|string $description = null)
 * @method static void minNotIntVal(iterable $input, Throwable|string $description = null)
 * @method static void minNotLeapDate(iterable $input, string $format, Throwable|string $description = null)
 * @method static void minNotLeapYear(iterable $input, Throwable|string $description = null)
 * @method static void minNotLessThan(iterable $input, $compareTo, Throwable|string $description = null)
 * @method static void minNotMaxAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void minNotMinAge(iterable $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void minNotMultiple(iterable $input, int $multipleOf, Throwable|string $description = null)
 * @method static void minNotNegative(iterable $input, Throwable|string $description = null)
 * @method static void minNotNumber(iterable $input, Throwable|string $description = null)
 * @method static void minNotNumericVal(iterable $input, Throwable|string $description = null)
 * @method static void minNotOdd(iterable $input, Throwable|string $description = null)
 * @method static void minNotPerfectSquare(iterable $input, Throwable|string $description = null)
 * @method static void minNotPositive(iterable $input, Throwable|string $description = null)
 * @method static void minNotPrimeNumber(iterable $input, Throwable|string $description = null)
 * @method static void minNotRoman(iterable $input, Throwable|string $description = null)
 * @method static void minNotStringType(iterable $input, Throwable|string $description = null)
 * @method static void minNotStringVal(iterable $input, Throwable|string $description = null)
 * @method static void minNotTime(iterable $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void minNumber(iterable $input, Throwable|string $description = null)
 * @method static void minNumericVal(iterable $input, Throwable|string $description = null)
 * @method static void minOdd(iterable $input, Throwable|string $description = null)
 * @method static void minPerfectSquare(iterable $input, Throwable|string $description = null)
 * @method static void minPositive(iterable $input, Throwable|string $description = null)
 * @method static void minPrimeNumber(iterable $input, Throwable|string $description = null)
 * @method static void minRoman(iterable $input, Throwable|string $description = null)
 * @method static void minStringType(iterable $input, Throwable|string $description = null)
 * @method static void minStringVal(iterable $input, Throwable|string $description = null)
 * @method static void minTime(iterable $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void multiple(mixed $input, int $multipleOf, Throwable|string $description = null)
 * @method static void negative(mixed $input, Throwable|string $description = null)
 * @method static void nfeAccessKey(mixed $input, Throwable|string $description = null)
 * @method static void nif(mixed $input, Throwable|string $description = null)
 * @method static void nip(mixed $input, Throwable|string $description = null)
 * @method static void no(mixed $input, $useLocale = false, Throwable|string $description = null)
 * @method static void noWhitespace(mixed $input, Throwable|string $description = null)
 * @method static void notAlnum(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notAlpha(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notArrayType(mixed $input, Throwable|string $description = null)
 * @method static void notArrayVal(mixed $input, Throwable|string $description = null)
 * @method static void notBase(mixed $input, int $base, string $chars = null, Throwable|string $description = null)
 * @method static void notBase64(mixed $input, Throwable|string $description = null)
 * @method static void notBetween(mixed $input, $minimum, $maximum, Throwable|string $description = null)
 * @method static void notBic(mixed $input, string $countryCode, Throwable|string $description = null)
 * @method static void notBlank(mixed $input, Throwable|string $description = null)
 * @method static void notBoolType(mixed $input, Throwable|string $description = null)
 * @method static void notBoolVal(mixed $input, Throwable|string $description = null)
 * @method static void notBsn(mixed $input, Throwable|string $description = null)
 * @method static void notCallableType(mixed $input, Throwable|string $description = null)
 * @method static void notCallback(mixed $input, callable $callback, Throwable|string $description = null)
 * @method static void notCharset(mixed $input, string ...$charset, Throwable|string $description = null)
 * @method static void notCnh(mixed $input, Throwable|string $description = null)
 * @method static void notCnpj(mixed $input, Throwable|string $description = null)
 * @method static void notConsonant(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notContains(mixed $input, $containsValue, bool $identical = false, Throwable|string $description = null)
 * @method static void notContainsAny(mixed $input, array $needles, bool $strictCompareArray = false, Throwable|string $description = null)
 * @method static void notControl(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notCountable(mixed $input, Throwable|string $description = null)
 * @method static void notCountryCode(mixed $input, string $set = null, Throwable|string $description = null)
 * @method static void notCpf(mixed $input, Throwable|string $description = null)
 * @method static void notCreditCard(mixed $input, string $brand = null, Throwable|string $description = null)
 * @method static void notCurrencyCode(mixed $input, Throwable|string $description = null)
 * @method static void notDate(mixed $input, string $format = 'Y-m-d', Throwable|string $description = null)
 * @method static void notDateTime(mixed $input, string $format = null, Throwable|string $description = null)
 * @method static void notDigit(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notDirectory(mixed $input, Throwable|string $description = null)
 * @method static void notDomain(mixed $input, bool $tldCheck = true, Throwable|string $description = null)
 * @method static void notEmail(mixed $input, Throwable|string $description = null)
 * @method static void notEmoji(mixed $input, Throwable|string $description = null)
 * @method static void notEmpty(mixed $input, Throwable|string $description = null)
 * @method static void notEndsWith(mixed $input, $endValue, bool $identical = false, Throwable|string $description = null)
 * @method static void notEquals(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void notEquivalent(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void notEven(mixed $input, Throwable|string $description = null)
 * @method static void notExecutable(mixed $input, Throwable|string $description = null)
 * @method static void notExists(mixed $input, Throwable|string $description = null)
 * @method static void notExtension(mixed $input, string $extension, Throwable|string $description = null)
 * @method static void notFactor(mixed $input, int $dividend, Throwable|string $description = null)
 * @method static void notFalseVal(mixed $input, Throwable|string $description = null)
 * @method static void notFibonacci(mixed $input, Throwable|string $description = null)
 * @method static void notFile(mixed $input, Throwable|string $description = null)
 * @method static void notFilterVar(mixed $input, int $filter, $options = null, Throwable|string $description = null)
 * @method static void notFinite(mixed $input, Throwable|string $description = null)
 * @method static void notFloatType(mixed $input, Throwable|string $description = null)
 * @method static void notFloatVal(mixed $input, Throwable|string $description = null)
 * @method static void notGraph(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notGreaterThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void notHexRgbColor(mixed $input, Throwable|string $description = null)
 * @method static void notIban(mixed $input, Throwable|string $description = null)
 * @method static void notIdentical(mixed $input, $value, Throwable|string $description = null)
 * @method static void notImage(mixed $input, finfo $fileInfo = null, Throwable|string $description = null)
 * @method static void notImei(mixed $input, Throwable|string $description = null)
 * @method static void notIn(mixed $input, $haystack, bool $compareIdentical = false, Throwable|string $description = null)
 * @method static void notInfinite(mixed $input, Throwable|string $description = null)
 * @method static void notInstance(mixed $input, string $instanceName, Throwable|string $description = null)
 * @method static void notIntType(mixed $input, Throwable|string $description = null)
 * @method static void notIntVal(mixed $input, Throwable|string $description = null)
 * @method static void notIp(mixed $input, string $range = '*', int $options = null, Throwable|string $description = null)
 * @method static void notIsbn(mixed $input, Throwable|string $description = null)
 * @method static void notIterableType(mixed $input, Throwable|string $description = null)
 * @method static void notJson(mixed $input, Throwable|string $description = null)
 * @method static void notLanguageCode(mixed $input, string $set = null, Throwable|string $description = null)
 * @method static void notLeapDate(mixed $input, string $format, Throwable|string $description = null)
 * @method static void notLeapYear(mixed $input, Throwable|string $description = null)
 * @method static void notLessThan(mixed $input, $compareTo, Throwable|string $description = null)
 * @method static void notLowercase(mixed $input, Throwable|string $description = null)
 * @method static void notLuhn(mixed $input, Throwable|string $description = null)
 * @method static void notMacAddress(mixed $input, Throwable|string $description = null)
 * @method static void notMaxAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void notMimetype(mixed $input, string $mimetype, Throwable|string $description = null)
 * @method static void notMinAge(mixed $input, int $age, string $format = null, Throwable|string $description = null)
 * @method static void notMultiple(mixed $input, int $multipleOf, Throwable|string $description = null)
 * @method static void notNegative(mixed $input, Throwable|string $description = null)
 * @method static void notNfeAccessKey(mixed $input, Throwable|string $description = null)
 * @method static void notNif(mixed $input, Throwable|string $description = null)
 * @method static void notNip(mixed $input, Throwable|string $description = null)
 * @method static void notNo(mixed $input, $useLocale = false, Throwable|string $description = null)
 * @method static void notNoWhitespace(mixed $input, Throwable|string $description = null)
 * @method static void notNullType(mixed $input, Throwable|string $description = null)
 * @method static void notNumber(mixed $input, Throwable|string $description = null)
 * @method static void notNumericVal(mixed $input, Throwable|string $description = null)
 * @method static void notObjectType(mixed $input, Throwable|string $description = null)
 * @method static void notOdd(mixed $input, Throwable|string $description = null)
 * @method static void notOptional(mixed $input, Throwable|string $description = null)
 * @method static void notPerfectSquare(mixed $input, Throwable|string $description = null)
 * @method static void notPesel(mixed $input, Throwable|string $description = null)
 * @method static void notPhone(mixed $input, Throwable|string $description = null)
 * @method static void notPhpLabel(mixed $input, Throwable|string $description = null)
 * @method static void notPis(mixed $input, Throwable|string $description = null)
 * @method static void notPolishIdCard(mixed $input, Throwable|string $description = null)
 * @method static void notPositive(mixed $input, Throwable|string $description = null)
 * @method static void notPostalCode(mixed $input, string $countryCode, Throwable|string $description = null)
 * @method static void notPrimeNumber(mixed $input, Throwable|string $description = null)
 * @method static void notPrintable(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notPunct(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notReadable(mixed $input, Throwable|string $description = null)
 * @method static void notRegex(mixed $input, string $regex, Throwable|string $description = null)
 * @method static void notResourceType(mixed $input, Throwable|string $description = null)
 * @method static void notRoman(mixed $input, Throwable|string $description = null)
 * @method static void notScalarVal(mixed $input, Throwable|string $description = null)
 * @method static void notSize(mixed $input, string $minSize = null, string $maxSize = null, Throwable|string $description = null)
 * @method static void notSlug(mixed $input, Throwable|string $description = null)
 * @method static void notSorted(mixed $input, string $direction, Throwable|string $description = null)
 * @method static void notSpace(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notStartsWith(mixed $input, $startValue, bool $identical = false, Throwable|string $description = null)
 * @method static void notStringType(mixed $input, Throwable|string $description = null)
 * @method static void notStringVal(mixed $input, Throwable|string $description = null)
 * @method static void notSubdivisionCode(mixed $input, string $countryCode, Throwable|string $description = null)
 * @method static void notSubset(mixed $input, array $superset, Throwable|string $description = null)
 * @method static void notSymbolicLink(mixed $input, Throwable|string $description = null)
 * @method static void notTime(mixed $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void notTld(mixed $input, Throwable|string $description = null)
 * @method static void notTrueVal(mixed $input, Throwable|string $description = null)
 * @method static void notType(mixed $input, string $type, Throwable|string $description = null)
 * @method static void notUnique(mixed $input, Throwable|string $description = null)
 * @method static void notUploaded(mixed $input, Throwable|string $description = null)
 * @method static void notUppercase(mixed $input, Throwable|string $description = null)
 * @method static void notUrl(mixed $input, Throwable|string $description = null)
 * @method static void notUuid(mixed $input, int $version = null, Throwable|string $description = null)
 * @method static void notVersion(mixed $input, Throwable|string $description = null)
 * @method static void notVideoUrl(mixed $input, string $service = null, Throwable|string $description = null)
 * @method static void notVowel(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notWritable(mixed $input, Throwable|string $description = null)
 * @method static void notXdigit(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void notYes(mixed $input, $useLocale = false, Throwable|string $description = null)
 * @method static void nullType(mixed $input, Throwable|string $description = null)
 * @method static void number(mixed $input, Throwable|string $description = null)
 * @method static void numericVal(mixed $input, Throwable|string $description = null)
 * @method static void objectType(mixed $input, Throwable|string $description = null)
 * @method static void odd(mixed $input, Throwable|string $description = null)
 * @method static void perfectSquare(mixed $input, Throwable|string $description = null)
 * @method static void pesel(mixed $input, Throwable|string $description = null)
 * @method static void phone(mixed $input, Throwable|string $description = null)
 * @method static void phpLabel(mixed $input, Throwable|string $description = null)
 * @method static void pis(mixed $input, Throwable|string $description = null)
 * @method static void polishIdCard(mixed $input, Throwable|string $description = null)
 * @method static void positive(mixed $input, Throwable|string $description = null)
 * @method static void postalCode(mixed $input, string $countryCode, Throwable|string $description = null)
 * @method static void primeNumber(mixed $input, Throwable|string $description = null)
 * @method static void printable(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void punct(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void readable(mixed $input, Throwable|string $description = null)
 * @method static void regex(mixed $input, string $regex, Throwable|string $description = null)
 * @method static void resourceType(mixed $input, Throwable|string $description = null)
 * @method static void roman(mixed $input, Throwable|string $description = null)
 * @method static void scalarVal(mixed $input, Throwable|string $description = null)
 * @method static void size(mixed $input, string $minSize = null, string $maxSize = null, Throwable|string $description = null)
 * @method static void slug(mixed $input, Throwable|string $description = null)
 * @method static void sorted(mixed $input, string $direction, Throwable|string $description = null)
 * @method static void space(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void startsWith(mixed $input, $startValue, bool $identical = false, Throwable|string $description = null)
 * @method static void stringType(mixed $input, Throwable|string $description = null)
 * @method static void stringVal(mixed $input, Throwable|string $description = null)
 * @method static void subdivisionCode(mixed $input, string $countryCode, Throwable|string $description = null)
 * @method static void subset(mixed $input, array $superset, Throwable|string $description = null)
 * @method static void symbolicLink(mixed $input, Throwable|string $description = null)
 * @method static void time(mixed $input, string $format = 'H:i:s', Throwable|string $description = null)
 * @method static void tld(mixed $input, Throwable|string $description = null)
 * @method static void trueVal(mixed $input, Throwable|string $description = null)
 * @method static void type(mixed $input, string $type, Throwable|string $description = null)
 * @method static void unique(mixed $input, Throwable|string $description = null)
 * @method static void uploaded(mixed $input, Throwable|string $description = null)
 * @method static void uppercase(mixed $input, Throwable|string $description = null)
 * @method static void url(mixed $input, Throwable|string $description = null)
 * @method static void uuid(mixed $input, int $version = null, Throwable|string $description = null)
 * @method static void version(mixed $input, Throwable|string $description = null)
 * @method static void videoUrl(mixed $input, string $service = null, Throwable|string $description = null)
 * @method static void vowel(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void writable(mixed $input, Throwable|string $description = null)
 * @method static void xdigit(mixed $input, string ...$additionalChars, Throwable|string $description = null)
 * @method static void yes(mixed $input, $useLocale = false, Throwable|string $description = null)
 * phpcs:enable Generic.Files.LineLength
 */
final class Assert
{
    /**
     * @var AssertionCreator
     */
    private static $assertionCreator;

    /**
     * @param mixed[] $parameters
     *
     * @throws CannotCreateAssertionException
     * @throws Exception
     */
    public static function __callStatic(string $name, array $parameters): void
    {
        $input = array_shift($parameters);

        $assertion = self::getAssertionCreator()->create($name, $parameters);
        $assertion->assert($input);
    }

    /**
     * @param mixed $input
     */
    public static function that($input): ChainAssert
    {
        return new ChainAssert($input);
    }

    private static function getAssertionCreator(): AssertionCreator
    {
        if (!self::$assertionCreator instanceof AssertionCreator) {
            self::$assertionCreator = new ComposedCreator(
                new MaxAssertor(),
                new ComposedCreator(
                    new MinAssertor(),
                    new ComposedCreator(
                        new LengthAssertor(),
                        new ComposedCreator(
                            new AllAssertor(),
                            new KeyCreator(new NotCreator(new StandardCreator()))
                        )
                    )
                )
            );
        }

        return self::$assertionCreator;
    }
}
