<?php

/*
 * This file is part of Respect/Assertion.
 *
 * (c) Henrique Moody <henriquemoody@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE file
 * that was distributed with this source code.
 */

declare(strict_types=1);

namespace Respect\Assertion;

use Exception;
use finfo;
use Respect\Assertion\Assertor\AllAssertor;
use Respect\Assertion\Assertor\LengthAssertor;
use Respect\Assertion\Assertor\MaxAssertor;
use Respect\Assertion\Assertor\MinAssertor;
use Respect\Assertion\Creator\ComposedCreator;
use Respect\Assertion\Creator\NotCreator;
use Respect\Assertion\Creator\StandardCreator;
use Respect\Assertion\Exception\CannotCreateAssertionException;

use function array_shift;

// phpcs:disable Generic.Files.LineLength

/**
 * @method static void age($input, int $minAge = null, int $maxAge = null, $description = null)
 * @method static void all(iterable $input, $compareTo, $description = null)
 * @method static void allAge(iterable $input, int $minAge = null, int $maxAge = null, $description = null)
 * @method static void allAlnum(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allAlpha(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allAlwaysInvalid(iterable $input, $description = null)
 * @method static void allAlwaysValid(iterable $input, $description = null)
 * @method static void allArrayType(iterable $input, $description = null)
 * @method static void allArrayVal(iterable $input, $description = null)
 * @method static void allBank(iterable $input, string $countryCode, $description = null)
 * @method static void allBankAccount(iterable $input, string $countryCode, $description = null)
 * @method static void allBase(iterable $input, $description = null)
 * @method static void allBetween(iterable $input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void allBic(iterable $input, string $countryCode, $description = null)
 * @method static void allBoolType(iterable $input, $description = null)
 * @method static void allBoolVal(iterable $input, $description = null)
 * @method static void allBsn(iterable $input, $description = null)
 * @method static void allCall(iterable $input, $description = null)
 * @method static void allCallableType(iterable $input, $description = null)
 * @method static void allCallback(iterable $input, callable $callback, $description = null)
 * @method static void allCharset(iterable $input, $charset, $description = null)
 * @method static void allCnh(iterable $input, $description = null)
 * @method static void allCnpj(iterable $input, $description = null)
 * @method static void allConsonant(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allContains(iterable $input, $containsValue, bool $identical = false, $description = null)
 * @method static void allCountable(iterable $input, $description = null)
 * @method static void allCountryCode(iterable $input, $description = null)
 * @method static void allCpf(iterable $input, $description = null)
 * @method static void allCreditCard(iterable $input, string $brand = null, $description = null)
 * @method static void allCurrencyCode(iterable $input, $description = null)
 * @method static void allDate(iterable $input, string $format = null, $description = null)
 * @method static void allDigit(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allDirectory(iterable $input, $description = null)
 * @method static void allDomain(iterable $input, bool $tldCheck = true, $description = null)
 * @method static void allEmail(iterable $input, $description = null)
 * @method static void allEndsWith(iterable $input, $endValue, bool $identical = false, $description = null)
 * @method static void allEven(iterable $input, $description = null)
 * @method static void allExecutable(iterable $input, $description = null)
 * @method static void allExists(iterable $input, $description = null)
 * @method static void allExtension(iterable $input, string $extension, $description = null)
 * @method static void allFactor(iterable $input, int $dividend, $description = null)
 * @method static void allFalseVal(iterable $input, $description = null)
 * @method static void allFibonacci(iterable $input, $description = null)
 * @method static void allFile(iterable $input, $description = null)
 * @method static void allFilterVar(iterable $input, int $filter, $options = null, $description = null)
 * @method static void allFinite(iterable $input, $description = null)
 * @method static void allFloatType(iterable $input, $description = null)
 * @method static void allFloatVal(iterable $input, $description = null)
 * @method static void allGraph(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allHexRgbColor(iterable $input, $description = null)
 * @method static void allIdentical(iterable $input, $value, $description = null)
 * @method static void allIdentityCard(iterable $input, string $countryCode, $description = null)
 * @method static void allImage(iterable $input, finfo $fileInfo = null, $description = null)
 * @method static void allImei(iterable $input, $description = null)
 * @method static void allIn(iterable $input, $haystack, bool $compareIdentical = false, $description = null)
 * @method static void allInfinite(iterable $input, $description = null)
 * @method static void allInstance(iterable $input, string $instanceName, $description = null)
 * @method static void allIntType(iterable $input, $description = null)
 * @method static void allIntVal(iterable $input, $description = null)
 * @method static void allIp(iterable $input, $ipOptions = null, $description = null)
 * @method static void allIterableType(iterable $input, $description = null)
 * @method static void allJson(iterable $input, $description = null)
 * @method static void allKeyValue(iterable $input, string $comparedKey, string $ruleName, string $baseKey, $description = null)
 * @method static void allLanguageCode(iterable $input, string $set, $description = null)
 * @method static void allLeapDate(iterable $input, string $format, $description = null)
 * @method static void allLeapYear(iterable $input, $description = null)
 * @method static void allLength(iterable $input, int $min = null, int $max = null, bool $inclusive = true, $description = null)
 * @method static void allLowercase(iterable $input, $description = null)
 * @method static void allMacAddress(iterable $input, $description = null)
 * @method static void allMax(iterable $input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void allMimetype(iterable $input, string $mimetype, $description = null)
 * @method static void allMin(iterable $input, $minValue, bool $inclusive = true, $description = null)
 * @method static void allMinimumAge(iterable $input, int $age, $description = null)
 * @method static void allMultiple(iterable $input, int $multipleOf, $description = null)
 * @method static void allNegative(iterable $input, $description = null)
 * @method static void allNo(iterable $input, $useLocale = false, $description = null)
 * @method static void allNotAge(iterable $input, int $minAge = null, int $maxAge = null, $description = null)
 * @method static void allNotAlnum(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotAlpha(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotAlwaysInvalid(iterable $input, $description = null)
 * @method static void allNotAlwaysValid(iterable $input, $description = null)
 * @method static void allNotArrayType(iterable $input, $description = null)
 * @method static void allNotArrayVal(iterable $input, $description = null)
 * @method static void allNotBank(iterable $input, string $countryCode, $description = null)
 * @method static void allNotBankAccount(iterable $input, string $countryCode, $description = null)
 * @method static void allNotBase(iterable $input, $description = null)
 * @method static void allNotBetween(iterable $input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void allNotBic(iterable $input, string $countryCode, $description = null)
 * @method static void allNotBlank(iterable $input, $description = null)
 * @method static void allNotBoolType(iterable $input, $description = null)
 * @method static void allNotBoolVal(iterable $input, $description = null)
 * @method static void allNotBsn(iterable $input, $description = null)
 * @method static void allNotCall(iterable $input, $description = null)
 * @method static void allNotCallableType(iterable $input, $description = null)
 * @method static void allNotCallback(iterable $input, callable $callback, $description = null)
 * @method static void allNotCharset(iterable $input, $charset, $description = null)
 * @method static void allNotCnh(iterable $input, $description = null)
 * @method static void allNotCnpj(iterable $input, $description = null)
 * @method static void allNotConsonant(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotContains(iterable $input, $containsValue, bool $identical = false, $description = null)
 * @method static void allNotCountable(iterable $input, $description = null)
 * @method static void allNotCountryCode(iterable $input, $description = null)
 * @method static void allNotCpf(iterable $input, $description = null)
 * @method static void allNotCreditCard(iterable $input, string $brand = null, $description = null)
 * @method static void allNotCurrencyCode(iterable $input, $description = null)
 * @method static void allNotDate(iterable $input, string $format = null, $description = null)
 * @method static void allNotDigit(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotDirectory(iterable $input, $description = null)
 * @method static void allNotDomain(iterable $input, bool $tldCheck = true, $description = null)
 * @method static void allNotEmail(iterable $input, $description = null)
 * @method static void allNotEmpty(iterable $input, $description = null)
 * @method static void allNotEndsWith(iterable $input, $endValue, bool $identical = false, $description = null)
 * @method static void allNotEquals(iterable $input, $compareTo, $description = null)
 * @method static void allNotEven(iterable $input, $description = null)
 * @method static void allNotExecutable(iterable $input, $description = null)
 * @method static void allNotExists(iterable $input, $description = null)
 * @method static void allNotExtension(iterable $input, string $extension, $description = null)
 * @method static void allNotFactor(iterable $input, int $dividend, $description = null)
 * @method static void allNotFalseVal(iterable $input, $description = null)
 * @method static void allNotFibonacci(iterable $input, $description = null)
 * @method static void allNotFile(iterable $input, $description = null)
 * @method static void allNotFilterVar(iterable $input, int $filter, $options = null, $description = null)
 * @method static void allNotFinite(iterable $input, $description = null)
 * @method static void allNotFloatType(iterable $input, $description = null)
 * @method static void allNotFloatVal(iterable $input, $description = null)
 * @method static void allNotGraph(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotHexRgbColor(iterable $input, $description = null)
 * @method static void allNotIdentical(iterable $input, $value, $description = null)
 * @method static void allNotIdentityCard(iterable $input, string $countryCode, $description = null)
 * @method static void allNotImage(iterable $input, finfo $fileInfo = null, $description = null)
 * @method static void allNotImei(iterable $input, $description = null)
 * @method static void allNotIn(iterable $input, $haystack, bool $compareIdentical = false, $description = null)
 * @method static void allNotInfinite(iterable $input, $description = null)
 * @method static void allNotInstance(iterable $input, string $instanceName, $description = null)
 * @method static void allNotIntType(iterable $input, $description = null)
 * @method static void allNotIntVal(iterable $input, $description = null)
 * @method static void allNotIp(iterable $input, $ipOptions = null, $description = null)
 * @method static void allNotIterableType(iterable $input, $description = null)
 * @method static void allNotJson(iterable $input, $description = null)
 * @method static void allNotKeyValue(iterable $input, string $comparedKey, string $ruleName, string $baseKey, $description = null)
 * @method static void allNotLanguageCode(iterable $input, string $set, $description = null)
 * @method static void allNotLeapDate(iterable $input, string $format, $description = null)
 * @method static void allNotLeapYear(iterable $input, $description = null)
 * @method static void allNotLength(iterable $input, int $min = null, int $max = null, bool $inclusive = true, $description = null)
 * @method static void allNotLowercase(iterable $input, $description = null)
 * @method static void allNotMacAddress(iterable $input, $description = null)
 * @method static void allNotMax(iterable $input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void allNotMimetype(iterable $input, string $mimetype, $description = null)
 * @method static void allNotMin(iterable $input, $minValue, bool $inclusive = true, $description = null)
 * @method static void allNotMinimumAge(iterable $input, int $age, $description = null)
 * @method static void allNotMultiple(iterable $input, int $multipleOf, $description = null)
 * @method static void allNotNegative(iterable $input, $description = null)
 * @method static void allNotNo(iterable $input, $useLocale = false, $description = null)
 * @method static void allNotNotBlank(iterable $input, $description = null)
 * @method static void allNotNotEmpty(iterable $input, $description = null)
 * @method static void allNotNotOptional(iterable $input, $description = null)
 * @method static void allNotNoWhitespace(iterable $input, $description = null)
 * @method static void allNotNullType(iterable $input, $description = null)
 * @method static void allNotNumeric(iterable $input, $description = null)
 * @method static void allNotObjectType(iterable $input, $description = null)
 * @method static void allNotOdd(iterable $input, $description = null)
 * @method static void allNotOptional(iterable $input, $description = null)
 * @method static void allNotPerfectSquare(iterable $input, $description = null)
 * @method static void allNotPesel(iterable $input, $description = null)
 * @method static void allNotPhone(iterable $input, $description = null)
 * @method static void allNotPhpLabel(iterable $input, $description = null)
 * @method static void allNotPositive(iterable $input, $description = null)
 * @method static void allNotPostalCode(iterable $input, string $countryCode, $description = null)
 * @method static void allNotPrimeNumber(iterable $input, $description = null)
 * @method static void allNotPrnt(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotPunct(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotReadable(iterable $input, $description = null)
 * @method static void allNotRegex(iterable $input, string $regex, $description = null)
 * @method static void allNotResourceType(iterable $input, $description = null)
 * @method static void allNotRoman(iterable $input, $description = null)
 * @method static void allNotScalarVal(iterable $input, $description = null)
 * @method static void allNotSf(iterable $input, string $name, array $params = null, $description = null)
 * @method static void allNotSize(iterable $input, string $minSize = null, string $maxSize = null, $description = null)
 * @method static void allNotSlug(iterable $input, $description = null)
 * @method static void allNotSpace(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotStartsWith(iterable $input, $startValue, bool $identical = false, $description = null)
 * @method static void allNotStringType(iterable $input, $description = null)
 * @method static void allNotSubdivisionCode(iterable $input, string $countryCode, $description = null)
 * @method static void allNotSymbolicLink(iterable $input, $description = null)
 * @method static void allNotTld(iterable $input, $description = null)
 * @method static void allNotTrueVal(iterable $input, $description = null)
 * @method static void allNotType(iterable $input, string $type, $description = null)
 * @method static void allNotUploaded(iterable $input, $description = null)
 * @method static void allNotUppercase(iterable $input, $description = null)
 * @method static void allNotUrl(iterable $input, $description = null)
 * @method static void allNotVersion(iterable $input, $description = null)
 * @method static void allNotVideoUrl(iterable $input, string $service = null, $description = null)
 * @method static void allNotVowel(iterable $input, $description = null)
 * @method static void allNotWritable(iterable $input, $description = null)
 * @method static void allNotXdigit(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allNotYes(iterable $input, $useLocale = false, $description = null)
 * @method static void allNotZend(iterable $input, $validator, array $params = null, $description = null)
 * @method static void allNoWhitespace(iterable $input, $description = null)
 * @method static void allNullType(iterable $input, $description = null)
 * @method static void allNumeric(iterable $input, $description = null)
 * @method static void allObjectType(iterable $input, $description = null)
 * @method static void allOdd(iterable $input, $description = null)
 * @method static void allPerfectSquare(iterable $input, $description = null)
 * @method static void allPesel(iterable $input, $description = null)
 * @method static void allPhone(iterable $input, $description = null)
 * @method static void allPhpLabel(iterable $input, $description = null)
 * @method static void allPositive(iterable $input, $description = null)
 * @method static void allPostalCode(iterable $input, string $countryCode, $description = null)
 * @method static void allPrimeNumber(iterable $input, $description = null)
 * @method static void allPrnt(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allPunct(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allReadable(iterable $input, $description = null)
 * @method static void allRegex(iterable $input, string $regex, $description = null)
 * @method static void allResourceType(iterable $input, $description = null)
 * @method static void allRoman(iterable $input, $description = null)
 * @method static void allScalarVal(iterable $input, $description = null)
 * @method static void allSf(iterable $input, string $name, array $params = null, $description = null)
 * @method static void allSize(iterable $input, string $minSize = null, string $maxSize = null, $description = null)
 * @method static void allSlug(iterable $input, $description = null)
 * @method static void allSpace(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allStartsWith(iterable $input, $startValue, bool $identical = false, $description = null)
 * @method static void allStringType(iterable $input, $description = null)
 * @method static void allSubdivisionCode(iterable $input, string $countryCode, $description = null)
 * @method static void allSymbolicLink(iterable $input, $description = null)
 * @method static void allTld(iterable $input, $description = null)
 * @method static void allTrueVal(iterable $input, $description = null)
 * @method static void allType(iterable $input, string $type, $description = null)
 * @method static void allUploaded(iterable $input, $description = null)
 * @method static void allUppercase(iterable $input, $description = null)
 * @method static void allUrl(iterable $input, $description = null)
 * @method static void allVersion(iterable $input, $description = null)
 * @method static void allVideoUrl(iterable $input, string $service = null, $description = null)
 * @method static void allVowel(iterable $input, $description = null)
 * @method static void allWritable(iterable $input, $description = null)
 * @method static void allXdigit(iterable $input, string $additionalChars = null, $description = null)
 * @method static void allYes(iterable $input, $useLocale = false, $description = null)
 * @method static void allZend(iterable $input, $validator, array $params = null, $description = null)
 * @method static void alnum($input, string $additionalChars = null, $description = null)
 * @method static void alpha($input, string $additionalChars = null, $description = null)
 * @method static void alwaysInvalid($input, $description = null)
 * @method static void alwaysValid($input, $description = null)
 * @method static void arrayType($input, $description = null)
 * @method static void arrayVal($input, $description = null)
 * @method static void bank($input, string $countryCode, $description = null)
 * @method static void bankAccount($input, string $countryCode, $description = null)
 * @method static void base($input, $description = null)
 * @method static void between($input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void bic($input, string $countryCode, $description = null)
 * @method static void boolType($input, $description = null)
 * @method static void boolVal($input, $description = null)
 * @method static void bsn($input, $description = null)
 * @method static void call($input, $description = null)
 * @method static void callableType($input, $description = null)
 * @method static void callback($input, callable $callback, $description = null)
 * @method static void charset($input, $charset, $description = null)
 * @method static void cnh($input, $description = null)
 * @method static void cnpj($input, $description = null)
 * @method static void consonant($input, string $additionalChars = null, $description = null)
 * @method static void contains($input, $containsValue, bool $identical = false, $description = null)
 * @method static void countable($input, $description = null)
 * @method static void countryCode($input, $description = null)
 * @method static void cpf($input, $description = null)
 * @method static void creditCard($input, string $brand = null, $description = null)
 * @method static void currencyCode($input, $description = null)
 * @method static void date($input, string $format = null, $description = null)
 * @method static void digit($input, string $additionalChars = null, $description = null)
 * @method static void directory($input, $description = null)
 * @method static void domain($input, bool $tldCheck = true, $description = null)
 * @method static void email($input, $description = null)
 * @method static void endsWith($input, $endValue, bool $identical = false, $description = null)
 * @method static void equals($input, $compareTo, $description = null)
 * @method static void even($input, $description = null)
 * @method static void executable($input, $description = null)
 * @method static void exists($input, $description = null)
 * @method static void extension($input, string $extension, $description = null)
 * @method static void factor($input, int $dividend, $description = null)
 * @method static void falseVal($input, $description = null)
 * @method static void fibonacci($input, $description = null)
 * @method static void file($input, $description = null)
 * @method static void filterVar($input, int $filter, $options = null, $description = null)
 * @method static void finite($input, $description = null)
 * @method static void floatType($input, $description = null)
 * @method static void floatVal($input, $description = null)
 * @method static void graph($input, string $additionalChars = null, $description = null)
 * @method static void hexRgbColor($input, $description = null)
 * @method static void identical($input, $value, $description = null)
 * @method static void identityCard($input, string $countryCode, $description = null)
 * @method static void image($input, finfo $fileInfo = null, $description = null)
 * @method static void imei($input, $description = null)
 * @method static void in($input, $haystack, bool $compareIdentical = false, $description = null)
 * @method static void infinite($input, $description = null)
 * @method static void instance($input, string $instanceName, $description = null)
 * @method static void intType($input, $description = null)
 * @method static void intVal($input, $description = null)
 * @method static void ip($input, $ipOptions = null, $description = null)
 * @method static void iterableType($input, $description = null)
 * @method static void json($input, $description = null)
 * @method static void keyValue($input, string $comparedKey, string $ruleName, string $baseKey, $description = null)
 * @method static void languageCode($input, string $set, $description = null)
 * @method static void leapDate($input, string $format, $description = null)
 * @method static void leapYear($input, $description = null)
 * @method static void length($input, $compareTo, $description = null)
 * @method static void lengthBetween($input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void lengthEven($input, $description = null)
 * @method static void lengthFactor($input, int $dividend, $description = null)
 * @method static void lengthFibonacci($input, $description = null)
 * @method static void lengthIdentical($input, $value, $description = null)
 * @method static void lengthMax($input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void lengthMin($input, $minValue, bool $inclusive = true, $description = null)
 * @method static void lengthMultiple($input, int $multipleOf, $description = null)
 * @method static void lengthNotBetween($input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void lengthNot($input, $compareTo, $description = null)
 * @method static void lengthNotEven($input, $description = null)
 * @method static void lengthNotFactor($input, int $dividend, $description = null)
 * @method static void lengthNotFibonacci($input, $description = null)
 * @method static void lengthNotIdentical($input, $value, $description = null)
 * @method static void lengthNotMax($input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void lengthNotMin($input, $minValue, bool $inclusive = true, $description = null)
 * @method static void lengthNotMultiple($input, int $multipleOf, $description = null)
 * @method static void lengthNotOdd($input, $description = null)
 * @method static void lengthNotPerfectSquare($input, $description = null)
 * @method static void lengthNotPositive($input, $description = null)
 * @method static void lengthNotPrimeNumber($input, $description = null)
 * @method static void lengthOdd($input, $description = null)
 * @method static void lengthPerfectSquare($input, $description = null)
 * @method static void lengthPositive($input, $description = null)
 * @method static void lengthPrimeNumber($input, $description = null)
 * @method static void lowercase($input, $description = null)
 * @method static void macAddress($input, $description = null)
 * @method static void max(iterable $input, $compareTo, $description = null)
 * @method static void maxBetween(iterable $input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void maxEven(iterable $input, $description = null)
 * @method static void maxFactor(iterable $input, int $dividend, $description = null)
 * @method static void maxFibonacci(iterable $input, $description = null)
 * @method static void maxIdentical(iterable $input, $value, $description = null)
 * @method static void maxMax(iterable $input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void maxMin(iterable $input, $minValue, bool $inclusive = true, $description = null)
 * @method static void maxMultiple(iterable $input, int $multipleOf, $description = null)
 * @method static void maxNotBetween(iterable $input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void maxNotEquals(iterable $input, $compareTo, $description = null)
 * @method static void maxNotEven(iterable $input, $description = null)
 * @method static void maxNotFactor(iterable $input, int $dividend, $description = null)
 * @method static void maxNotFibonacci(iterable $input, $description = null)
 * @method static void maxNotIdentical(iterable $input, $value, $description = null)
 * @method static void maxNotMax(iterable $input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void maxNotMin(iterable $input, $minValue, bool $inclusive = true, $description = null)
 * @method static void maxNotMultiple(iterable $input, int $multipleOf, $description = null)
 * @method static void maxNotOdd(iterable $input, $description = null)
 * @method static void maxNotPerfectSquare(iterable $input, $description = null)
 * @method static void maxNotPositive(iterable $input, $description = null)
 * @method static void maxNotPrimeNumber(iterable $input, $description = null)
 * @method static void maxOdd(iterable $input, $description = null)
 * @method static void maxPerfectSquare(iterable $input, $description = null)
 * @method static void maxPositive(iterable $input, $description = null)
 * @method static void maxPrimeNumber(iterable $input, $description = null)
 * @method static void mimetype($input, string $mimetype, $description = null)
 * @method static void min(iterable $input, $compareTo, $description = null)
 * @method static void minBetween(iterable $input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void minEven(iterable $input, $description = null)
 * @method static void minFactor(iterable $input, int $dividend, $description = null)
 * @method static void minFibonacci(iterable $input, $description = null)
 * @method static void minIdentical(iterable $input, $value, $description = null)
 * @method static void minimumAge($input, int $age, $description = null)
 * @method static void minMax(iterable $input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void minMin(iterable $input, $minValue, bool $inclusive = true, $description = null)
 * @method static void minMultiple(iterable $input, int $multipleOf, $description = null)
 * @method static void minNotBetween(iterable $input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void minNotEquals(iterable $input, $compareTo, $description = null)
 * @method static void minNotEven(iterable $input, $description = null)
 * @method static void minNotFactor(iterable $input, int $dividend, $description = null)
 * @method static void minNotFibonacci(iterable $input, $description = null)
 * @method static void minNotIdentical(iterable $input, $value, $description = null)
 * @method static void minNotMax(iterable $input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void minNotMin(iterable $input, $minValue, bool $inclusive = true, $description = null)
 * @method static void minNotMultiple(iterable $input, int $multipleOf, $description = null)
 * @method static void minNotOdd(iterable $input, $description = null)
 * @method static void minNotPerfectSquare(iterable $input, $description = null)
 * @method static void minNotPositive(iterable $input, $description = null)
 * @method static void minNotPrimeNumber(iterable $input, $description = null)
 * @method static void minOdd(iterable $input, $description = null)
 * @method static void minPerfectSquare(iterable $input, $description = null)
 * @method static void minPositive(iterable $input, $description = null)
 * @method static void minPrimeNumber(iterable $input, $description = null)
 * @method static void multiple($input, int $multipleOf, $description = null)
 * @method static void negative($input, $description = null)
 * @method static void no($input, $useLocale = false, $description = null)
 * @method static void not($input, $compareTo, $description = null)
 * @method static void notAge($input, int $minAge = null, int $maxAge = null, $description = null)
 * @method static void notAlnum($input, string $additionalChars = null, $description = null)
 * @method static void notAlpha($input, string $additionalChars = null, $description = null)
 * @method static void notAlwaysInvalid($input, $description = null)
 * @method static void notAlwaysValid($input, $description = null)
 * @method static void notArrayType($input, $description = null)
 * @method static void notArrayVal($input, $description = null)
 * @method static void notBank($input, string $countryCode, $description = null)
 * @method static void notBankAccount($input, string $countryCode, $description = null)
 * @method static void notBase($input, $description = null)
 * @method static void notBetween($input, $min = null, $max = null, bool $inclusive = true, $description = null)
 * @method static void notBic($input, string $countryCode, $description = null)
 * @method static void notBlank($input, $description = null)
 * @method static void notBoolType($input, $description = null)
 * @method static void notBoolVal($input, $description = null)
 * @method static void notBsn($input, $description = null)
 * @method static void notCall($input, $description = null)
 * @method static void notCallableType($input, $description = null)
 * @method static void notCallback($input, callable $callback, $description = null)
 * @method static void notCharset($input, $charset, $description = null)
 * @method static void notCnh($input, $description = null)
 * @method static void notCnpj($input, $description = null)
 * @method static void notConsonant($input, string $additionalChars = null, $description = null)
 * @method static void notContains($input, $containsValue, bool $identical = false, $description = null)
 * @method static void notCountable($input, $description = null)
 * @method static void notCountryCode($input, $description = null)
 * @method static void notCpf($input, $description = null)
 * @method static void notCreditCard($input, string $brand = null, $description = null)
 * @method static void notCurrencyCode($input, $description = null)
 * @method static void notDate($input, string $format = null, $description = null)
 * @method static void notDigit($input, string $additionalChars = null, $description = null)
 * @method static void notDirectory($input, $description = null)
 * @method static void notDomain($input, bool $tldCheck = true, $description = null)
 * @method static void notEmail($input, $description = null)
 * @method static void notEmpty($input, $description = null)
 * @method static void notEndsWith($input, $endValue, bool $identical = false, $description = null)
 * @method static void notEven($input, $description = null)
 * @method static void notExecutable($input, $description = null)
 * @method static void notExists($input, $description = null)
 * @method static void notExtension($input, string $extension, $description = null)
 * @method static void notFactor($input, int $dividend, $description = null)
 * @method static void notFalseVal($input, $description = null)
 * @method static void notFibonacci($input, $description = null)
 * @method static void notFile($input, $description = null)
 * @method static void notFilterVar($input, int $filter, $options = null, $description = null)
 * @method static void notFinite($input, $description = null)
 * @method static void notFloatType($input, $description = null)
 * @method static void notFloatVal($input, $description = null)
 * @method static void notGraph($input, string $additionalChars = null, $description = null)
 * @method static void notHexRgbColor($input, $description = null)
 * @method static void notIdentical($input, $value, $description = null)
 * @method static void notIdentityCard($input, string $countryCode, $description = null)
 * @method static void notImage($input, finfo $fileInfo = null, $description = null)
 * @method static void notImei($input, $description = null)
 * @method static void notIn($input, $haystack, bool $compareIdentical = false, $description = null)
 * @method static void notInfinite($input, $description = null)
 * @method static void notInstance($input, string $instanceName, $description = null)
 * @method static void notIntType($input, $description = null)
 * @method static void notIntVal($input, $description = null)
 * @method static void notIp($input, $ipOptions = null, $description = null)
 * @method static void notIterableType($input, $description = null)
 * @method static void notJson($input, $description = null)
 * @method static void notKeyValue($input, string $comparedKey, string $ruleName, string $baseKey, $description = null)
 * @method static void notLanguageCode($input, string $set, $description = null)
 * @method static void notLeapDate($input, string $format, $description = null)
 * @method static void notLeapYear($input, $description = null)
 * @method static void notLength($input, int $min = null, int $max = null, bool $inclusive = true, $description = null)
 * @method static void notLowercase($input, $description = null)
 * @method static void notMacAddress($input, $description = null)
 * @method static void notMax($input, $maxValue, bool $inclusive = true, $description = null)
 * @method static void notMimetype($input, string $mimetype, $description = null)
 * @method static void notMin($input, $minValue, bool $inclusive = true, $description = null)
 * @method static void notMinimumAge($input, int $age, $description = null)
 * @method static void notMultiple($input, int $multipleOf, $description = null)
 * @method static void notNegative($input, $description = null)
 * @method static void notNo($input, $useLocale = false, $description = null)
 * @method static void notNotBlank($input, $description = null)
 * @method static void notNotEmpty($input, $description = null)
 * @method static void notNotOptional($input, $description = null)
 * @method static void notNoWhitespace($input, $description = null)
 * @method static void notNullType($input, $description = null)
 * @method static void notNumeric($input, $description = null)
 * @method static void notObjectType($input, $description = null)
 * @method static void notOdd($input, $description = null)
 * @method static void notOptional($input, $description = null)
 * @method static void notPerfectSquare($input, $description = null)
 * @method static void notPesel($input, $description = null)
 * @method static void notPhone($input, $description = null)
 * @method static void notPhpLabel($input, $description = null)
 * @method static void notPositive($input, $description = null)
 * @method static void notPostalCode($input, string $countryCode, $description = null)
 * @method static void notPrimeNumber($input, $description = null)
 * @method static void notPrnt($input, string $additionalChars = null, $description = null)
 * @method static void notPunct($input, string $additionalChars = null, $description = null)
 * @method static void notReadable($input, $description = null)
 * @method static void notRegex($input, string $regex, $description = null)
 * @method static void notResourceType($input, $description = null)
 * @method static void notRoman($input, $description = null)
 * @method static void notScalarVal($input, $description = null)
 * @method static void notSf($input, string $name, array $params = null, $description = null)
 * @method static void notSize($input, string $minSize = null, string $maxSize = null, $description = null)
 * @method static void notSlug($input, $description = null)
 * @method static void notSpace($input, string $additionalChars = null, $description = null)
 * @method static void notStartsWith($input, $startValue, bool $identical = false, $description = null)
 * @method static void notStringType($input, $description = null)
 * @method static void notSubdivisionCode($input, string $countryCode, $description = null)
 * @method static void notSymbolicLink($input, $description = null)
 * @method static void notTld($input, $description = null)
 * @method static void notTrueVal($input, $description = null)
 * @method static void notType($input, string $type, $description = null)
 * @method static void notUploaded($input, $description = null)
 * @method static void notUppercase($input, $description = null)
 * @method static void notUrl($input, $description = null)
 * @method static void notVersion($input, $description = null)
 * @method static void notVideoUrl($input, string $service = null, $description = null)
 * @method static void notVowel($input, $description = null)
 * @method static void notWritable($input, $description = null)
 * @method static void notXdigit($input, string $additionalChars = null, $description = null)
 * @method static void notYes($input, $useLocale = false, $description = null)
 * @method static void notZend($input, $validator, array $params = null, $description = null)
 * @method static void noWhitespace($input, $description = null)
 * @method static void nullType($input, $description = null)
 * @method static void numeric($input, $description = null)
 * @method static void objectType($input, $description = null)
 * @method static void odd($input, $description = null)
 * @method static void perfectSquare($input, $description = null)
 * @method static void pesel($input, $description = null)
 * @method static void phone($input, $description = null)
 * @method static void phpLabel($input, $description = null)
 * @method static void positive($input, $description = null)
 * @method static void postalCode($input, string $countryCode, $description = null)
 * @method static void primeNumber($input, $description = null)
 * @method static void prnt($input, string $additionalChars = null, $description = null)
 * @method static void punct($input, string $additionalChars = null, $description = null)
 * @method static void readable($input, $description = null)
 * @method static void regex($input, string $regex, $description = null)
 * @method static void resourceType($input, $description = null)
 * @method static void roman($input, $description = null)
 * @method static void scalarVal($input, $description = null)
 * @method static void sf($input, string $name, array $params = null, $description = null)
 * @method static void size($input, string $minSize = null, string $maxSize = null, $description = null)
 * @method static void slug($input, $description = null)
 * @method static void space($input, string $additionalChars = null, $description = null)
 * @method static void startsWith($input, $startValue, bool $identical = false, $description = null)
 * @method static void stringType($input, $description = null)
 * @method static void subdivisionCode($input, string $countryCode, $description = null)
 * @method static void symbolicLink($input, $description = null)
 * @method static void tld($input, $description = null)
 * @method static void trueVal($input, $description = null)
 * @method static void type($input, string $type, $description = null)
 * @method static void uploaded($input, $description = null)
 * @method static void uppercase($input, $description = null)
 * @method static void url($input, $description = null)
 * @method static void version($input, $description = null)
 * @method static void videoUrl($input, string $service = null, $description = null)
 * @method static void vowel($input, $description = null)
 * @method static void writable($input, $description = null)
 * @method static void xdigit($input, string $additionalChars = null, $description = null)
 * @method static void yes($input, $useLocale = false, $description = null)
 * @method static void zend($input, $validator, array $params = null, $description = null)
 */
final class Assert
{
    /**
     * @var AssertionCreator
     */
    private static $assertionCreator;

    /**
     * @param mixed[] $parameters
     *
     * @throws CannotCreateAssertionException
     * @throws Exception
     */
    public static function __callStatic(string $name, array $parameters): void
    {
        $input = array_shift($parameters);

        $assertion = self::getAssertionCreator()->create($name, $parameters);
        $assertion->assert($input);
    }

    private static function getAssertionCreator(): AssertionCreator
    {
        if (!self::$assertionCreator instanceof AssertionCreator) {
            self::$assertionCreator = new ComposedCreator(
                new MaxAssertor(),
                new ComposedCreator(
                    new MinAssertor(),
                    new ComposedCreator(
                        new LengthAssertor(),
                        new ComposedCreator(
                            new AllAssertor(),
                            new NotCreator(
                                new StandardCreator()
                            )
                        )
                    )
                )
            );
        }

        return self::$assertionCreator;
    }
}
