#!/usr/bin/env bash

set -euo pipefail

declare -r IFS=$'\n'
declare -r DIRECTORY=$(dirname "${BASH_SOURCE}")
declare -r ALLOW_LIST="${DIRECTORY}/allow_list"
declare -r ORIGINAL_VALIDATOR="${DIRECTORY}/../vendor/respect/validation/library/ChainedValidator.php"
declare -r ORIGINAL_ASSERT="${DIRECTORY}/../src/AssertMixin.php"
declare -r ORIGINAL_CHAIN_ASSERT="${DIRECTORY}/../src/ChainAssertMixin.php"


declare -r TRANSFORMED_VALIDATOR="${DIRECTORY}/../src/ChainedValidator.php"
declare -r ALL_RULES=$(mktemp)
declare -r CANONICAL_RULES=$(mktemp)
declare -r SPECIAL_RULES=$(mktemp)
declare -r TEMPORARY_ASSERT="${DIRECTORY}/../src/AssertTmp.php"
declare -r TEMPORARY_CHAIN_ASSERT="${DIRECTORY}/../src/ChainAssertTmp.php"

exclude-function()
{
  grep --invert-match "public function ${1}("
}

echo "- Parsing all rules"
cp "${ORIGINAL_VALIDATOR}" "${TRANSFORMED_VALIDATOR}"
vendor/bin/phpcbf -q "${TRANSFORMED_VALIDATOR}" || true
{
  sed -n "/^{/,/^}/p" "${TRANSFORMED_VALIDATOR}" |
    tr --delete '{}' |
    sed --regexp-extended ':a;N;$!ba;s/\n+( +)//g' |
    sed "s,* @param,\n    * @param,g" |
    sed "s,*/,\n    */\n    ,g" |
    sed "s,\;,;\n\n    ,g" |
    sed --regexp-extended 's,string \.{3}(\$[a-zA-Z0-9_]+),string \1 = "",g' |
    sed --regexp-extended 's,([a-zA-Z0-9_]+) \.{3}(\$[a-zA-Z0-9_]+),?\1 \2 = null,g' |
    grep --invert-match "Validatable" |
    exclude-function "alwaysInvalid" |
    exclude-function "alwaysValid" |
    exclude-function "key" |
    exclude-function "keySet" |
    exclude-function "keyValue" |
    exclude-function "length" |
    exclude-function "max" |
    exclude-function "min" |
    exclude-function "sf" |
    exclude-function "zend" |
    sed "s/): .\+/, Throwable|string|null \$description = null): self\;/g" |
    sed "s/(, /(/g" > "${CANONICAL_RULES}"

  while read -r rule_name; do
    grep "public function ${rule_name}(" "${CANONICAL_RULES}" >> "${SPECIAL_RULES}" || continue
  done < "${ALLOW_LIST}"

  # original rules
  cat "${CANONICAL_RULES}"


  # "all" rules
  sed --regexp-extended "s,public function ([^(]+)\(,public function all\u\1(,g" "${CANONICAL_RULES}" |
    sed "s,allEquals,all,g"

  # "allNot" rules
  sed --regexp-extended "s,public function ([^(]+)\(,public function allNot\u\1(,g" "${CANONICAL_RULES}" |
    sed "s,allNotEquals,allNot,g"

  # "key" rules
  sed --regexp-extended "s/public function ([^(]+)\(/public function key\u\1(mixed \$key, /g; s/, \)/)/g" "${CANONICAL_RULES}" |
    sed "s,keyEquals,key,g"

  # "keyNot" rules
  sed --regexp-extended "s/public function ([^(]+)\(/public function keyNot\u\1(mixed \$key, /g; s/, \)/)/g" "${CANONICAL_RULES}" |
    sed "s,keyNotEquals,keyNot,g"

  # "not" rules
  sed --regexp-extended "s,public function ([^(]+)\(,public function not\u\1(,g" "${CANONICAL_RULES}" |
    sed "s,notEquals,not,g"

  sed --regexp-extended "s,public function ([^(]+)\(,public function nullOr\u\1(,g" "${CANONICAL_RULES}" |
    sed "s,nullOrEquals,nullOr,g"

  sed --regexp-extended "s,public function ([^(]+)\(,public function nullOrNot\u\1(,g" "${CANONICAL_RULES}" |
    sed "s,nullOrNotEquals,nullOrNot,g"

  sed --regexp-extended "s,public function ([^(]+)\(,public function length\u\1(,g" "${SPECIAL_RULES}" |
    sed "s,lengthEquals,length,g"

  sed --regexp-extended "s,public function ([^(]+)\(,public function max\u\1(,g" "${SPECIAL_RULES}" |
    sed "s,maxEquals,max,g"

  sed --regexp-extended "s,public function ([^(]+)\(,public function min\u\1(,g" "${SPECIAL_RULES}" |
    sed "s,minEquals,min,g"
} > "${ALL_RULES}"

rm "${TRANSFORMED_VALIDATOR}"

echo "- Updating ${ORIGINAL_ASSERT}"
{
  sed --silent "/<?/,/^{/p" "${ORIGINAL_ASSERT}"
  sed --regexp-extended "s/public function ([^(]+)\(/public static function \1(mixed \$input, /g" "${ALL_RULES}" |
    sed "s/, )/)/g" |
    sed "s,self,void,g"
  echo "}"
} > "${TEMPORARY_ASSERT}"

vendor/bin/phpcbf -q "${TEMPORARY_ASSERT}" || true
mv "${TEMPORARY_ASSERT}" "${ORIGINAL_ASSERT}"

echo "- Updating ${ORIGINAL_CHAIN_ASSERT}"
{
  sed --silent "/<?/,/^{/p" "${ORIGINAL_CHAIN_ASSERT}"
  cat "${ALL_RULES}"
  echo "}"
} > "${TEMPORARY_CHAIN_ASSERT}"

vendor/bin/phpcbf -q "${TEMPORARY_CHAIN_ASSERT}" || true
mv "${TEMPORARY_CHAIN_ASSERT}" "${ORIGINAL_CHAIN_ASSERT}"

echo "Finished!"
