#!/usr/bin/env bash

set -euo pipefail

declare -r IFS=$'\n'
declare -r ASSERT_METHOD_DECLARATION=" * @method static void"
declare -r CHAIN_ASSERT_METHOD_DECLARATION=" * @method ChainAssert"
declare -r EQUALS_ARGUMENTS="\$compareTo, Throwable|string \$description = null"
declare -r DIRECTORY=$(dirname "${BASH_SOURCE}")
declare -r TEMPORARY_METHODS=$(mktemp)
declare -r TEMPORARY_ASSERT=$(mktemp)
declare -r TEMPORARY_CHAIN_ASSERT=$(mktemp)

{
  while read rule; do
    declare name=$(cut --delimiter '(' --field 1 <<< "${rule}")
    declare assertion=$(
      sed 's/(/(mixed $input, /' <<< "${rule}" |
        sed 's/)/, Throwable|string $description = null)/' |
        sed "s/, ,/,/"
    )
    declare assertion_iterable=$(
      sed 's/(mixed $input/(iterable $input/' <<< "${assertion}"
    )
    declare assertion_key=$(
      sed 's/(mixed $input/(array $input, mixed $key/' <<< "${assertion}"
    )

    echo -e -n "Processing '${name}' assertion\r" 1>&2

    if [[ "${assertion}" =~ "Validatable" ]] ||
        [[ "${name}" = "length" ]] ||
        [[ "${name}" = "max" ]] ||
        [[ "${name}" = "min" ]] ||
        [[ "${name}" = "sf" ]] ||
        [[ "${name}" = "zend" ]]; then
      echo "Assertion '${name}' will not be created" 1>&2
      continue
    fi

    if  [[ "${name}" =~ "always"* ]]; then
      echo "Assertion '${name}' will not be created" 1>&2
      continue
    fi

    if  [[ "${name}" =~ "key"* ]]; then
      echo "Assertion '${name}' will not be created" 1>&2
      continue
    fi

    echo "${assertion}"
    echo "all${assertion_iterable^}"
    echo "key${assertion_key^}"

    grep --quiet "^not" <<< "${name}" || {
      echo "not${assertion^}"
      echo "allNot${assertion_iterable^}"
      echo "keyNot${assertion_key^}"
    }

    grep --quiet "^${name}$" "${DIRECTORY}/allow_list" || {
      echo "Assertion '${name}' created without prefixes" 1>&2
      continue
    }

    echo "length${assertion^}"
    echo "max${assertion_iterable^}"
    echo "min${assertion_iterable^}"

    grep --quiet "^not" <<< "${name}" || {
      echo "lengthNot${assertion^}"
      echo "maxNot${assertion_iterable^}"
      echo "minNot${assertion_iterable^}"
    }

    echo "Assertion '${name}' created with success" 1>&2

  done < <(
    grep '@method' "${DIRECTORY}/../vendor/respect/validation/library/Validator.php" |
      cut --delimiter ' ' --field 6-
  )

  echo "all(iterable \$input, ${EQUALS_ARGUMENTS})"
  echo "allNot(iterable \$input, ${EQUALS_ARGUMENTS})"

  echo "key(array \$input, mixed \$key, ${EQUALS_ARGUMENTS})"
  echo "keyPresent(array \$input, mixed \$key, Throwable|string \$description = null)"
  echo "keyNotPresent(array \$input, mixed \$key, Throwable|string \$description = null)"

  echo "length(iterable \$input, ${EQUALS_ARGUMENTS})"
  echo "lengthNot(iterable \$input, ${EQUALS_ARGUMENTS})"

  echo "min(iterable \$input, ${EQUALS_ARGUMENTS})"
  echo "minNot(iterable \$input, ${EQUALS_ARGUMENTS})"

  echo "max(iterable \$input, ${EQUALS_ARGUMENTS})"
  echo "maxNot(iterable \$input, ${EQUALS_ARGUMENTS})"

} | sort > "${TEMPORARY_METHODS}"

echo "- Updating Assert.php"
{
  sed --silent "/<?/,/\/\*\*/p" "${DIRECTORY}/../src/Assert.php"
  echo " * phpcs:disable Generic.Files.LineLength"
  sed "s,^,${ASSERT_METHOD_DECLARATION} ,g" < "${TEMPORARY_METHODS}"
  echo " * phpcs:enable Generic.Files.LineLength"
  echo " */"
  sed --silent '/final/,/^}/p' "${DIRECTORY}/../src/Assert.php"
} > "${TEMPORARY_ASSERT}"
mv "${TEMPORARY_ASSERT}" "${DIRECTORY}/../src/Assert.php"

echo "- Updating ChainAssert.php"
{
  sed --silent "/<?/,/\/\*\*/p" "${DIRECTORY}/../src/ChainAssert.php"
  echo " * phpcs:disable Generic.Files.LineLength"
  sed --regexp-extended 's/\((mixed|iterable|array) \$input, /(/g' < "${TEMPORARY_METHODS}" |
      sed "s,^,${CHAIN_ASSERT_METHOD_DECLARATION} ,g"
  echo " * phpcs:enable Generic.Files.LineLength"
  echo " */"
  sed --silent '/final/,/^}/p' "${DIRECTORY}/../src/ChainAssert.php"

} > "${TEMPORARY_CHAIN_ASSERT}"
mv "${TEMPORARY_CHAIN_ASSERT}" "${DIRECTORY}/../src/ChainAssert.php"

echo "Finished!"
